{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\buffer-reader.ts","mappings":";;;AAAA,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;AAE1C,MAAa,YAAY;IAMD;IALZ,MAAM,GAAW,WAAW,CAAC;IAErC,wCAAwC;IAChC,QAAQ,GAAW,OAAO,CAAC;IAEnC,YAAoB,SAAiB,CAAC;QAAlB,WAAM,GAAN,MAAM,CAAY;IAAG,CAAC;IAEnC,SAAS,CAAC,MAAc,EAAE,MAAc;QAC3C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEM,KAAK;QACR,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;QACjB,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,IAAI;QACP,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,KAAK;QACR,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;QACjB,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,MAAM,CAAC,MAAc;QACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC/B,YAAY;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;QACtB,OAAO,MAAM,CAAC;IAClB,CAAC;IAEM,OAAO;QACV,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,GAAG,GAAG,KAAK,CAAC;QAChB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,GAAE;QACnC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QAClB,YAAY;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC;IAC/D,CAAC;IAEM,KAAK,CAAC,MAAc;QACvB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;QACpE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC;QACtB,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AArDD,oCAqDC","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\buffer-reader.ts"],"sourcesContent":["const emptyBuffer = Buffer.allocUnsafe(0);\n\nexport class BufferReader {\n    private buffer: Buffer = emptyBuffer;\n\n    // TODO(bmc): support non-utf8 encoding?\n    private encoding: string = 'utf-8';\n\n    constructor(private offset: number = 0) {}\n\n    public setBuffer(offset: number, buffer: Buffer): void {\n        this.offset = offset;\n        this.buffer = buffer;\n    }\n\n    public int16(): number {\n        const result = this.buffer.readInt16BE(this.offset);\n        this.offset += 2;\n        return result;\n    }\n\n    public byte(): number {\n        const result = this.buffer[this.offset];\n        this.offset++;\n        return result;\n    }\n\n    public int32(): number {\n        const result = this.buffer.readInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n\n    public string(length: number): string {\n        const encoding = this.encoding;\n        //@ts-ignore\n        const result = this.buffer.toString(encoding, this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n\n    public cstring(): string {\n        const start = this.offset;\n        let end = start;\n        while (this.buffer[end++] !== 0) {}\n        this.offset = end;\n        //@ts-ignore\n        return this.buffer.toString(this.encoding, start, end - 1);\n    }\n\n    public bytes(length: number): Buffer {\n        const result = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n}\n"],"version":3}