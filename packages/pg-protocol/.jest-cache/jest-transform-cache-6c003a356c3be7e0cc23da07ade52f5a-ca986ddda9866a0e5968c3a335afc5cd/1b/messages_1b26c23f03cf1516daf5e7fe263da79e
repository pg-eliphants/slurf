7e9d6ac396c6779078f3d3ac5a36cd45
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;
exports.parseComplete = {
    name: 'parseComplete',
    length: 5
};
exports.bindComplete = {
    name: 'bindComplete',
    length: 5
};
exports.closeComplete = {
    name: 'closeComplete',
    length: 5
};
exports.noData = {
    name: 'noData',
    length: 5
};
exports.portalSuspended = {
    name: 'portalSuspended',
    length: 5
};
exports.replicationStart = {
    name: 'replicationStart',
    length: 4
};
exports.emptyQuery = {
    name: 'emptyQuery',
    length: 4
};
exports.copyDone = {
    name: 'copyDone',
    length: 4
};
class DatabaseError extends Error {
    length;
    name;
    severity;
    code;
    detail;
    hint;
    position;
    internalPosition;
    internalQuery;
    where;
    schema;
    table;
    column;
    dataType;
    constraint;
    file;
    line;
    routine;
    constructor(message, length, name) {
        super(message);
        this.length = length;
        this.name = name;
    }
}
exports.DatabaseError = DatabaseError;
class CopyDataMessage {
    length;
    chunk;
    name = 'copyData';
    constructor(length, chunk) {
        this.length = length;
        this.chunk = chunk;
    }
}
exports.CopyDataMessage = CopyDataMessage;
class CopyResponse {
    length;
    name;
    binary;
    columnTypes;
    constructor(length, name, binary, columnCount) {
        this.length = length;
        this.name = name;
        this.binary = binary;
        this.columnTypes = new Array(columnCount);
    }
}
exports.CopyResponse = CopyResponse;
class Field {
    name;
    tableID;
    columnID;
    dataTypeID;
    dataTypeSize;
    dataTypeModifier;
    format;
    constructor(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {
        this.name = name;
        this.tableID = tableID;
        this.columnID = columnID;
        this.dataTypeID = dataTypeID;
        this.dataTypeSize = dataTypeSize;
        this.dataTypeModifier = dataTypeModifier;
        this.format = format;
    }
}
exports.Field = Field;
class RowDescriptionMessage {
    length;
    fieldCount;
    name = 'rowDescription';
    fields;
    constructor(length, fieldCount) {
        this.length = length;
        this.fieldCount = fieldCount;
        this.fields = new Array(this.fieldCount);
    }
}
exports.RowDescriptionMessage = RowDescriptionMessage;
class ParameterDescriptionMessage {
    length;
    parameterCount;
    name = 'parameterDescription';
    dataTypeIDs;
    constructor(length, parameterCount) {
        this.length = length;
        this.parameterCount = parameterCount;
        this.dataTypeIDs = new Array(this.parameterCount);
    }
}
exports.ParameterDescriptionMessage = ParameterDescriptionMessage;
class ParameterStatusMessage {
    length;
    parameterName;
    parameterValue;
    name = 'parameterStatus';
    constructor(length, parameterName, parameterValue) {
        this.length = length;
        this.parameterName = parameterName;
        this.parameterValue = parameterValue;
    }
}
exports.ParameterStatusMessage = ParameterStatusMessage;
class AuthenticationMD5Password {
    length;
    salt;
    name = 'authenticationMD5Password';
    constructor(length, salt) {
        this.length = length;
        this.salt = salt;
    }
}
exports.AuthenticationMD5Password = AuthenticationMD5Password;
class BackendKeyDataMessage {
    length;
    processID;
    secretKey;
    name = 'backendKeyData';
    constructor(length, processID, secretKey) {
        this.length = length;
        this.processID = processID;
        this.secretKey = secretKey;
    }
}
exports.BackendKeyDataMessage = BackendKeyDataMessage;
class NotificationResponseMessage {
    length;
    processId;
    channel;
    payload;
    name = 'notification';
    constructor(length, processId, channel, payload) {
        this.length = length;
        this.processId = processId;
        this.channel = channel;
        this.payload = payload;
    }
}
exports.NotificationResponseMessage = NotificationResponseMessage;
class ReadyForQueryMessage {
    length;
    status;
    name = 'readyForQuery';
    constructor(length, status) {
        this.length = length;
        this.status = status;
    }
}
exports.ReadyForQueryMessage = ReadyForQueryMessage;
class CommandCompleteMessage {
    length;
    text;
    name = 'commandComplete';
    constructor(length, text) {
        this.length = length;
        this.text = text;
    }
}
exports.CommandCompleteMessage = CommandCompleteMessage;
class DataRowMessage {
    length;
    fields;
    fieldCount;
    name = 'dataRow';
    constructor(length, fields) {
        this.length = length;
        this.fields = fields;
        this.fieldCount = fields.length;
    }
}
exports.DataRowMessage = DataRowMessage;
class NoticeMessage {
    length;
    message;
    constructor(length, message) {
        this.length = length;
        this.message = message;
    }
    name = 'notice';
    severity;
    code;
    detail;
    hint;
    position;
    internalPosition;
    internalQuery;
    where;
    schema;
    table;
    column;
    dataType;
    constraint;
    file;
    line;
    routine;
}
exports.NoticeMessage = NoticeMessage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,