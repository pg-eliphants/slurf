{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\testing\\buffer-list.ts","mappings":"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","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\testing\\buffer-list.ts"],"sourcesContent":["export default class BufferList {\r\n  constructor(public buffers: Buffer[] = []) {}\r\n\r\n  public add(buffer: Buffer, front?: boolean) {\r\n    this.buffers[front ? 'unshift' : 'push'](buffer)\r\n    return this\r\n  }\r\n\r\n  public addInt16(val: number, front?: boolean) {\r\n    return this.add(Buffer.from([val >>> 8, val >>> 0]), front)\r\n  }\r\n\r\n  public getByteLength(initial?: number) {\r\n    return this.buffers.reduce(function (previous, current) {\r\n      return previous + current.length\r\n    }, initial || 0)\r\n  }\r\n\r\n  public addInt32(val: number, first?: boolean) {\r\n    return this.add(\r\n      Buffer.from([(val >>> 24) & 0xff, (val >>> 16) & 0xff, (val >>> 8) & 0xff, (val >>> 0) & 0xff]),\r\n      first\r\n    )\r\n  }\r\n\r\n  public addCString(val: string, front?: boolean) {\r\n    var len = Buffer.byteLength(val)\r\n    var buffer = Buffer.alloc(len + 1)\r\n    buffer.write(val)\r\n    buffer[len] = 0\r\n    return this.add(buffer, front)\r\n  }\r\n\r\n  public addString(val: string, front?: boolean) {\r\n    var len = Buffer.byteLength(val)\r\n    var buffer = Buffer.alloc(len)\r\n    buffer.write(val)\r\n    return this.add(buffer, front)\r\n  }\r\n\r\n  public addChar(char: string, first?: boolean) {\r\n    return this.add(Buffer.from(char, 'utf8'), first)\r\n  }\r\n\r\n  public addByte(byte: number) {\r\n    return this.add(Buffer.from([byte]))\r\n  }\r\n\r\n  public join(appendLength?: boolean, char?: string): Buffer {\r\n    var length = this.getByteLength()\r\n    if (appendLength) {\r\n      this.addInt32(length + 4, true)\r\n      return this.join(false, char)\r\n    }\r\n    if (char) {\r\n      this.addChar(char, true)\r\n      length++\r\n    }\r\n    var result = Buffer.alloc(length)\r\n    var index = 0\r\n    this.buffers.forEach(function (buffer) {\r\n      buffer.copy(result, index, 0)\r\n      index += buffer.length\r\n    })\r\n    return result\r\n  }\r\n\r\n  public static concat(): Buffer {\r\n    var total = new BufferList()\r\n    for (var i = 0; i < arguments.length; i++) {\r\n      total.add(arguments[i])\r\n    }\r\n    return total.join()\r\n  }\r\n}\r\n"],"version":3}