4a7334b8f8a3c50c020af0681696396d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BufferList {
    buffers;
    constructor(buffers = []) {
        this.buffers = buffers;
    }
    add(buffer, front) {
        this.buffers[front ? 'unshift' : 'push'](buffer);
        return this;
    }
    addInt16(val, front) {
        return this.add(Buffer.from([val >>> 8, val >>> 0]), front);
    }
    getByteLength(initial) {
        return this.buffers.reduce(function (previous, current) {
            return previous + current.length;
        }, initial || 0);
    }
    addInt32(val, first) {
        return this.add(Buffer.from([(val >>> 24) & 0xff, (val >>> 16) & 0xff, (val >>> 8) & 0xff, (val >>> 0) & 0xff]), first);
    }
    addCString(val, front) {
        var len = Buffer.byteLength(val);
        var buffer = Buffer.alloc(len + 1);
        buffer.write(val);
        buffer[len] = 0;
        return this.add(buffer, front);
    }
    addString(val, front) {
        var len = Buffer.byteLength(val);
        var buffer = Buffer.alloc(len);
        buffer.write(val);
        return this.add(buffer, front);
    }
    addChar(char, first) {
        return this.add(Buffer.from(char, 'utf8'), first);
    }
    addByte(byte) {
        return this.add(Buffer.from([byte]));
    }
    join(appendLength, char) {
        var length = this.getByteLength();
        if (appendLength) {
            this.addInt32(length + 4, true);
            return this.join(false, char);
        }
        if (char) {
            this.addChar(char, true);
            length++;
        }
        var result = Buffer.alloc(length);
        var index = 0;
        this.buffers.forEach(function (buffer) {
            buffer.copy(result, index, 0);
            index += buffer.length;
        });
        return result;
    }
    static concat() {
        var total = new BufferList();
        for (var i = 0; i < arguments.length; i++) {
            total.add(arguments[i]);
        }
        return total.join();
    }
}
exports.default = BufferList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHJlcG9zXFxub2RlLXBvc3RncmVzXFxwYWNrYWdlc1xccGctcHJvdG9jb2xcXHNyY1xcdGVzdGluZ1xcYnVmZmVyLWxpc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFxQixVQUFVO0lBQ1Y7SUFBbkIsWUFBbUIsVUFBb0IsRUFBRTtRQUF0QixZQUFPLEdBQVAsT0FBTyxDQUFlO0lBQUcsQ0FBQztJQUV0QyxHQUFHLENBQUMsTUFBYyxFQUFFLEtBQWU7UUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDaEQsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBRU0sUUFBUSxDQUFDLEdBQVcsRUFBRSxLQUFlO1FBQzFDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUM3RCxDQUFDO0lBRU0sYUFBYSxDQUFDLE9BQWdCO1FBQ25DLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxRQUFRLEVBQUUsT0FBTztZQUNwRCxPQUFPLFFBQVEsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFBO1FBQ2xDLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUE7SUFDbEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFXLEVBQUUsS0FBZTtRQUMxQyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQy9GLEtBQUssQ0FDTixDQUFBO0lBQ0gsQ0FBQztJQUVNLFVBQVUsQ0FBQyxHQUFXLEVBQUUsS0FBZTtRQUM1QyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFBO1FBQ2xDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDakIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNmLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUE7SUFDaEMsQ0FBQztJQUVNLFNBQVMsQ0FBQyxHQUFXLEVBQUUsS0FBZTtRQUMzQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ2hDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDOUIsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNqQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ2hDLENBQUM7SUFFTSxPQUFPLENBQUMsSUFBWSxFQUFFLEtBQWU7UUFDMUMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ25ELENBQUM7SUFFTSxPQUFPLENBQUMsSUFBWTtRQUN6QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBRU0sSUFBSSxDQUFDLFlBQXNCLEVBQUUsSUFBYTtRQUMvQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDakMsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQy9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7U0FDOUI7UUFDRCxJQUFJLElBQUksRUFBRTtZQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFBO1lBQ3hCLE1BQU0sRUFBRSxDQUFBO1NBQ1Q7UUFDRCxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtRQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsTUFBTTtZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7WUFDN0IsS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUE7UUFDeEIsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTTtRQUNsQixJQUFJLEtBQUssR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFBO1FBQzVCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3pDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDeEI7UUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0NBQ0Y7QUExRUQsNkJBMEVDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxyZXBvc1xcbm9kZS1wb3N0Z3Jlc1xccGFja2FnZXNcXHBnLXByb3RvY29sXFxzcmNcXHRlc3RpbmdcXGJ1ZmZlci1saXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1ZmZlckxpc3Qge1xyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBidWZmZXJzOiBCdWZmZXJbXSA9IFtdKSB7fVxyXG5cclxuICBwdWJsaWMgYWRkKGJ1ZmZlcjogQnVmZmVyLCBmcm9udD86IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuYnVmZmVyc1tmcm9udCA/ICd1bnNoaWZ0JyA6ICdwdXNoJ10oYnVmZmVyKVxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRJbnQxNih2YWw6IG51bWJlciwgZnJvbnQ/OiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gdGhpcy5hZGQoQnVmZmVyLmZyb20oW3ZhbCA+Pj4gOCwgdmFsID4+PiAwXSksIGZyb250KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEJ5dGVMZW5ndGgoaW5pdGlhbD86IG51bWJlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuYnVmZmVycy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBjdXJyZW50KSB7XHJcbiAgICAgIHJldHVybiBwcmV2aW91cyArIGN1cnJlbnQubGVuZ3RoXHJcbiAgICB9LCBpbml0aWFsIHx8IDApXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkSW50MzIodmFsOiBudW1iZXIsIGZpcnN0PzogYm9vbGVhbikge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkKFxyXG4gICAgICBCdWZmZXIuZnJvbShbKHZhbCA+Pj4gMjQpICYgMHhmZiwgKHZhbCA+Pj4gMTYpICYgMHhmZiwgKHZhbCA+Pj4gOCkgJiAweGZmLCAodmFsID4+PiAwKSAmIDB4ZmZdKSxcclxuICAgICAgZmlyc3RcclxuICAgIClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRDU3RyaW5nKHZhbDogc3RyaW5nLCBmcm9udD86IGJvb2xlYW4pIHtcclxuICAgIHZhciBsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aCh2YWwpXHJcbiAgICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jKGxlbiArIDEpXHJcbiAgICBidWZmZXIud3JpdGUodmFsKVxyXG4gICAgYnVmZmVyW2xlbl0gPSAwXHJcbiAgICByZXR1cm4gdGhpcy5hZGQoYnVmZmVyLCBmcm9udClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRTdHJpbmcodmFsOiBzdHJpbmcsIGZyb250PzogYm9vbGVhbikge1xyXG4gICAgdmFyIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbClcclxuICAgIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MobGVuKVxyXG4gICAgYnVmZmVyLndyaXRlKHZhbClcclxuICAgIHJldHVybiB0aGlzLmFkZChidWZmZXIsIGZyb250KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFkZENoYXIoY2hhcjogc3RyaW5nLCBmaXJzdD86IGJvb2xlYW4pIHtcclxuICAgIHJldHVybiB0aGlzLmFkZChCdWZmZXIuZnJvbShjaGFyLCAndXRmOCcpLCBmaXJzdClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRCeXRlKGJ5dGU6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkKEJ1ZmZlci5mcm9tKFtieXRlXSkpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgam9pbihhcHBlbmRMZW5ndGg/OiBib29sZWFuLCBjaGFyPzogc3RyaW5nKTogQnVmZmVyIHtcclxuICAgIHZhciBsZW5ndGggPSB0aGlzLmdldEJ5dGVMZW5ndGgoKVxyXG4gICAgaWYgKGFwcGVuZExlbmd0aCkge1xyXG4gICAgICB0aGlzLmFkZEludDMyKGxlbmd0aCArIDQsIHRydWUpXHJcbiAgICAgIHJldHVybiB0aGlzLmpvaW4oZmFsc2UsIGNoYXIpXHJcbiAgICB9XHJcbiAgICBpZiAoY2hhcikge1xyXG4gICAgICB0aGlzLmFkZENoYXIoY2hhciwgdHJ1ZSlcclxuICAgICAgbGVuZ3RoKytcclxuICAgIH1cclxuICAgIHZhciByZXN1bHQgPSBCdWZmZXIuYWxsb2MobGVuZ3RoKVxyXG4gICAgdmFyIGluZGV4ID0gMFxyXG4gICAgdGhpcy5idWZmZXJzLmZvckVhY2goZnVuY3Rpb24gKGJ1ZmZlcikge1xyXG4gICAgICBidWZmZXIuY29weShyZXN1bHQsIGluZGV4LCAwKVxyXG4gICAgICBpbmRleCArPSBidWZmZXIubGVuZ3RoXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjb25jYXQoKTogQnVmZmVyIHtcclxuICAgIHZhciB0b3RhbCA9IG5ldyBCdWZmZXJMaXN0KClcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRvdGFsLmFkZChhcmd1bWVudHNbaV0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWwuam9pbigpXHJcbiAgfVxyXG59XHJcbiJdLCJ2ZXJzaW9uIjozfQ==