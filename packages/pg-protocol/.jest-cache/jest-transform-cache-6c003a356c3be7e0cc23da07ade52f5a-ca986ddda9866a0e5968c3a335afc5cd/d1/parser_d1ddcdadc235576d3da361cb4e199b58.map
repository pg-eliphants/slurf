{"version":3,"names":["cov_1826d0jt9d","actualCoverage","s","messages_1","require","buffer_reader_1","strict_1","CODE_LENGTH","LEN_LENGTH","HEADER_LENGTH","emptyBuffer","Buffer","allocUnsafe","MessageCodes","f","b","Parser","buffer","bufferLength","bufferOffset","reader","BufferReader","constructor","opts","mode","Error","parse","callback","mergeBuffer","bufferFullLength","offset","code","length","readUInt32BE","fullMessageLength","message","handlePacket","newLength","byteLength","newFullLength","newBuffer","newBufferLength","copy","bytes","bindComplete","parseComplete","closeComplete","noData","portalSuspended","copyDone","replicationStart","emptyQuery","parseDataRowMessage","parseCommandCompleteMessage","parseReadyForQueryMessage","parseNotificationMessage","parseAuthenticationResponse","parseParameterStatusMessage","parseBackendKeyData","parseErrorMessage","parseRowDescriptionMessage","parseParameterDescriptionMessage","parseCopyInMessage","parseCopyOutMessage","parseCopyData","strict","fail","toString","setBuffer","status","string","ReadyForQueryMessage","text","cstring","CommandCompleteMessage","chunk","slice","CopyDataMessage","parseCopyMessage","messageName","isBinary","byte","columnCount","int16","CopyResponse","i","columnTypes","processId","int32","channel","payload","NotificationResponseMessage","fieldCount","RowDescriptionMessage","fields","parseField","name","tableID","columnID","dataTypeID","dataTypeSize","dataTypeModifier","Field","parameterCount","ParameterDescriptionMessage","dataTypeIDs","Array","len","DataRowMessage","value","ParameterStatusMessage","processID","secretKey","BackendKeyDataMessage","salt","AuthenticationMD5Password","mechanisms","mechanism","push","data","fieldType","messageValue","M","NoticeMessage","DatabaseError","severity","S","C","detail","D","hint","H","position","P","internalPosition","p","internalQuery","q","where","W","schema","table","t","column","c","dataType","d","constraint","n","file","F","line","L","routine","R","exports"],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\parser.ts"],"sourcesContent":["import { TransformOptions } from 'stream';\r\nimport {\r\n    Mode,\r\n    bindComplete,\r\n    parseComplete,\r\n    closeComplete,\r\n    noData,\r\n    portalSuspended,\r\n    copyDone,\r\n    replicationStart,\r\n    emptyQuery,\r\n    ReadyForQueryMessage,\r\n    CommandCompleteMessage,\r\n    CopyDataMessage,\r\n    CopyResponse,\r\n    NotificationResponseMessage,\r\n    RowDescriptionMessage,\r\n    ParameterDescriptionMessage,\r\n    Field,\r\n    DataRowMessage,\r\n    ParameterStatusMessage,\r\n    BackendKeyDataMessage,\r\n    DatabaseError,\r\n    BackendMessage,\r\n    MessageName,\r\n    AuthenticationMD5Password,\r\n    NoticeMessage\r\n} from './messages';\r\nimport { BufferReader } from './buffer-reader';\r\nimport { strict as assert } from 'node:assert/strict';\r\n\r\n// every message is prefixed with a single bye\r\nconst CODE_LENGTH = 1;\r\n// every message has an int32 length which includes itself but does\r\n// NOT include the code in the length\r\nconst LEN_LENGTH = 4;\r\n\r\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;\r\n\r\nexport type Packet = {\r\n    code: number;\r\n    packet: Buffer;\r\n};\r\n\r\nconst emptyBuffer = Buffer.allocUnsafe(0);\r\n\r\ntype StreamOptions = TransformOptions & {\r\n    mode: Mode;\r\n};\r\n\r\nconst enum MessageCodes {\r\n    DataRow = 0x44, // D\r\n    ParseComplete = 0x31, // 1\r\n    BindComplete = 0x32, // 2\r\n    CloseComplete = 0x33, // 3\r\n    CommandComplete = 0x43, // C\r\n    ReadyForQuery = 0x5a, // Z\r\n    NoData = 0x6e, // n\r\n    NotificationResponse = 0x41, // A\r\n    AuthenticationResponse = 0x52, // R\r\n    ParameterStatus = 0x53, // S\r\n    BackendKeyData = 0x4b, // K\r\n    ErrorMessage = 0x45, // E\r\n    NoticeMessage = 0x4e, // N\r\n    RowDescriptionMessage = 0x54, // T\r\n    ParameterDescriptionMessage = 0x74, // t\r\n    PortalSuspended = 0x73, // s\r\n    ReplicationStart = 0x57, // W\r\n    EmptyQuery = 0x49, // I\r\n    CopyIn = 0x47, // G\r\n    CopyOut = 0x48, // H\r\n    CopyDone = 0x63, // c\r\n    CopyData = 0x64 // d\r\n}\r\n\r\nexport type MessageCallback = (msg: BackendMessage) => void;\r\n\r\nexport class Parser {\r\n    private buffer: Buffer = emptyBuffer;\r\n    private bufferLength: number = 0;\r\n    private bufferOffset: number = 0;\r\n    private reader = new BufferReader();\r\n    //private mode: Mode;\r\n\r\n    // so far the \"index.ts\" calls the constructor without arguments\r\n    constructor(opts?: StreamOptions) {\r\n        if (opts?.mode === 'binary') {\r\n            throw new Error('Binary mode not supported yet');\r\n        }\r\n        //this.mode = opts?.mode || 'text';\r\n    }\r\n\r\n    public parse(buffer: Buffer, callback: MessageCallback) {\r\n        this.mergeBuffer(buffer);\r\n        const bufferFullLength = this.bufferOffset + this.bufferLength;\r\n        let offset = this.bufferOffset;\r\n        while (offset + HEADER_LENGTH <= bufferFullLength) {\r\n            // code is 1 byte long - it identifies the message type\r\n            const code = this.buffer[offset];\r\n            // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\r\n            const length = this.buffer.readUInt32BE(offset + CODE_LENGTH);\r\n            const fullMessageLength = CODE_LENGTH + length;\r\n            if (fullMessageLength + offset <= bufferFullLength) {\r\n                const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);\r\n                callback(message);\r\n                offset += fullMessageLength;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        if (offset === bufferFullLength) {\r\n            // No more use for the buffer\r\n            this.buffer = emptyBuffer;\r\n            this.bufferLength = 0;\r\n            this.bufferOffset = 0;\r\n        } else {\r\n            // Adjust the cursors of remainingBuffer\r\n            this.bufferLength = bufferFullLength - offset;\r\n            this.bufferOffset = offset;\r\n        }\r\n    }\r\n\r\n    private mergeBuffer(buffer: Buffer): void {\r\n        if (this.bufferLength > 0) {\r\n            const newLength = this.bufferLength + buffer.byteLength;\r\n            const newFullLength = newLength + this.bufferOffset;\r\n            if (newFullLength > this.buffer.byteLength) {\r\n                // We can't concat the new buffer with the remaining one\r\n                let newBuffer: Buffer;\r\n                if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\r\n                    // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\r\n                    newBuffer = this.buffer;\r\n                } else {\r\n                    // Allocate a new larger buffer\r\n                    let newBufferLength = this.buffer.byteLength * 2;\r\n                    while (newLength >= newBufferLength) {\r\n                        newBufferLength *= 2;\r\n                    }\r\n                    newBuffer = Buffer.allocUnsafe(newBufferLength);\r\n                }\r\n                // Move the remaining buffer to the new one\r\n                this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);\r\n                this.buffer = newBuffer;\r\n                this.bufferOffset = 0;\r\n            }\r\n            // Concat the new buffer with the remaining one\r\n            buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);\r\n            this.bufferLength = newLength;\r\n        } else {\r\n            this.buffer = buffer;\r\n            this.bufferOffset = 0;\r\n            this.bufferLength = buffer.byteLength;\r\n        }\r\n    }\r\n\r\n    private handlePacket(offset: number, code: number, length: number, bytes: Buffer): BackendMessage {\r\n        switch (code) {\r\n            case MessageCodes.BindComplete:\r\n                return bindComplete;\r\n            case MessageCodes.ParseComplete:\r\n                return parseComplete;\r\n            case MessageCodes.CloseComplete:\r\n                return closeComplete;\r\n            case MessageCodes.NoData:\r\n                return noData;\r\n            case MessageCodes.PortalSuspended:\r\n                return portalSuspended;\r\n            case MessageCodes.CopyDone:\r\n                return copyDone;\r\n            case MessageCodes.ReplicationStart:\r\n                return replicationStart;\r\n            case MessageCodes.EmptyQuery:\r\n                return emptyQuery;\r\n            case MessageCodes.DataRow:\r\n                return this.parseDataRowMessage(offset, length, bytes);\r\n            case MessageCodes.CommandComplete:\r\n                return this.parseCommandCompleteMessage(offset, length, bytes);\r\n            case MessageCodes.ReadyForQuery:\r\n                return this.parseReadyForQueryMessage(offset, length, bytes);\r\n            case MessageCodes.NotificationResponse:\r\n                return this.parseNotificationMessage(offset, length, bytes);\r\n            case MessageCodes.AuthenticationResponse:\r\n                return this.parseAuthenticationResponse(offset, length, bytes);\r\n            case MessageCodes.ParameterStatus:\r\n                return this.parseParameterStatusMessage(offset, length, bytes);\r\n            case MessageCodes.BackendKeyData:\r\n                return this.parseBackendKeyData(offset, length, bytes);\r\n            case MessageCodes.ErrorMessage:\r\n                return this.parseErrorMessage(offset, length, bytes, 'error');\r\n            case MessageCodes.NoticeMessage:\r\n                return this.parseErrorMessage(offset, length, bytes, 'notice');\r\n            case MessageCodes.RowDescriptionMessage:\r\n                return this.parseRowDescriptionMessage(offset, length, bytes);\r\n            case MessageCodes.ParameterDescriptionMessage:\r\n                return this.parseParameterDescriptionMessage(offset, length, bytes);\r\n            case MessageCodes.CopyIn:\r\n                return this.parseCopyInMessage(offset, length, bytes);\r\n            case MessageCodes.CopyOut:\r\n                return this.parseCopyOutMessage(offset, length, bytes);\r\n            case MessageCodes.CopyData:\r\n                return this.parseCopyData(offset, length, bytes);\r\n            default:\r\n                assert.fail(`unknown message code: ${code.toString(16)}`);\r\n        }\r\n    }\r\n\r\n    private parseReadyForQueryMessage(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const status = this.reader.string(1);\r\n        return new ReadyForQueryMessage(length, status);\r\n    }\r\n\r\n    private parseCommandCompleteMessage(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const text = this.reader.cstring();\r\n        return new CommandCompleteMessage(length, text);\r\n    }\r\n\r\n    private parseCopyData(offset: number, length: number, bytes: Buffer) {\r\n        const chunk = bytes.slice(offset, offset + (length - 4));\r\n        return new CopyDataMessage(length, chunk);\r\n    }\r\n\r\n    private parseCopyInMessage(offset: number, length: number, bytes: Buffer) {\r\n        return this.parseCopyMessage(offset, length, bytes, 'copyInResponse');\r\n    }\r\n\r\n    private parseCopyOutMessage(offset: number, length: number, bytes: Buffer) {\r\n        return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse');\r\n    }\r\n\r\n    private parseCopyMessage(offset: number, length: number, bytes: Buffer, messageName: MessageName) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const isBinary = this.reader.byte() !== 0;\r\n        const columnCount = this.reader.int16();\r\n        const message = new CopyResponse(length, messageName, isBinary, columnCount);\r\n        for (let i = 0; i < columnCount; i++) {\r\n            message.columnTypes[i] = this.reader.int16();\r\n        }\r\n        return message;\r\n    }\r\n\r\n    private parseNotificationMessage(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const processId = this.reader.int32();\r\n        const channel = this.reader.cstring();\r\n        const payload = this.reader.cstring();\r\n        return new NotificationResponseMessage(length, processId, channel, payload);\r\n    }\r\n\r\n    private parseRowDescriptionMessage(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const fieldCount = this.reader.int16();\r\n        const message = new RowDescriptionMessage(length, fieldCount);\r\n        for (let i = 0; i < fieldCount; i++) {\r\n            message.fields[i] = this.parseField();\r\n        }\r\n        return message;\r\n    }\r\n\r\n    private parseField(): Field {\r\n        const name = this.reader.cstring();\r\n        const tableID = this.reader.int32();\r\n        const columnID = this.reader.int16();\r\n        const dataTypeID = this.reader.int32();\r\n        const dataTypeSize = this.reader.int16();\r\n        const dataTypeModifier = this.reader.int32();\r\n        const mode = this.reader.int16() === 0 ? 'text' : 'binary';\r\n        return new Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);\r\n    }\r\n\r\n    private parseParameterDescriptionMessage(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const parameterCount = this.reader.int16();\r\n        const message = new ParameterDescriptionMessage(length, parameterCount);\r\n        for (let i = 0; i < parameterCount; i++) {\r\n            message.dataTypeIDs[i] = this.reader.int32();\r\n        }\r\n        return message;\r\n    }\r\n\r\n    private parseDataRowMessage(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const fieldCount = this.reader.int16();\r\n        const fields: any[] = new Array(fieldCount);\r\n        for (let i = 0; i < fieldCount; i++) {\r\n            const len = this.reader.int32();\r\n            // a -1 for length means the value of the field is null\r\n            fields[i] = len === -1 ? null : this.reader.string(len);\r\n        }\r\n        return new DataRowMessage(length, fields);\r\n    }\r\n\r\n    private parseParameterStatusMessage(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const name = this.reader.cstring();\r\n        const value = this.reader.cstring();\r\n        return new ParameterStatusMessage(length, name, value);\r\n    }\r\n\r\n    private parseBackendKeyData(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const processID = this.reader.int32();\r\n        const secretKey = this.reader.int32();\r\n        return new BackendKeyDataMessage(length, processID, secretKey);\r\n    }\r\n\r\n    public parseAuthenticationResponse(offset: number, length: number, bytes: Buffer) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const code = this.reader.int32();\r\n        // TODO(bmc): maybe better types here\r\n        const message: BackendMessage & any = {\r\n            name: 'authenticationOk',\r\n            length\r\n        };\r\n\r\n        switch (code) {\r\n            case 0: // AuthenticationOk\r\n                break;\r\n            case 3: // AuthenticationCleartextPassword\r\n                if (message.length === 8) {\r\n                    message.name = 'authenticationCleartextPassword';\r\n                }\r\n                break;\r\n            case 5: // AuthenticationMD5Password\r\n                if (message.length === 12) {\r\n                    message.name = 'authenticationMD5Password';\r\n                    const salt = this.reader.bytes(4);\r\n                    return new AuthenticationMD5Password(length, salt);\r\n                }\r\n                break;\r\n            case 10: // AuthenticationSASL\r\n                message.name = 'authenticationSASL';\r\n                message.mechanisms = [];\r\n                let mechanism: string;\r\n                do {\r\n                    mechanism = this.reader.cstring();\r\n\r\n                    if (mechanism) {\r\n                        message.mechanisms.push(mechanism);\r\n                    }\r\n                } while (mechanism);\r\n                break;\r\n            case 11: // AuthenticationSASLContinue\r\n                message.name = 'authenticationSASLContinue';\r\n                message.data = this.reader.string(length - 8);\r\n                break;\r\n            case 12: // AuthenticationSASLFinal\r\n                message.name = 'authenticationSASLFinal';\r\n                message.data = this.reader.string(length - 8);\r\n                break;\r\n            default:\r\n                throw new Error('Unknown authenticationOk message type ' + code);\r\n        }\r\n        return message;\r\n    }\r\n\r\n    private parseErrorMessage(offset: number, length: number, bytes: Buffer, name: MessageName) {\r\n        this.reader.setBuffer(offset, bytes);\r\n        const fields: Record<string, string> = {};\r\n        let fieldType = this.reader.string(1);\r\n        while (fieldType !== '\\0') {\r\n            fields[fieldType] = this.reader.cstring();\r\n            fieldType = this.reader.string(1);\r\n        }\r\n\r\n        const messageValue = fields.M;\r\n\r\n        const message =\r\n            name === 'notice' ? new NoticeMessage(length, messageValue) : new DatabaseError(messageValue, length, name);\r\n\r\n        message.severity = fields.S;\r\n        message.code = fields.C;\r\n        message.detail = fields.D;\r\n        message.hint = fields.H;\r\n        message.position = fields.P;\r\n        message.internalPosition = fields.p;\r\n        message.internalQuery = fields.q;\r\n        message.where = fields.W;\r\n        message.schema = fields.s;\r\n        message.table = fields.t;\r\n        message.column = fields.c;\r\n        message.dataType = fields.d;\r\n        message.constraint = fields.n;\r\n        message.file = fields.F;\r\n        message.line = fields.L;\r\n        message.routine = fields.R;\r\n        return message;\r\n    }\r\n}\r\n"],"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"}