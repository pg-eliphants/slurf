{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\parser.ts","mappings":"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","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\parser.ts"],"sourcesContent":["import { TransformOptions } from 'stream';\nimport {\n    Mode,\n    bindComplete,\n    parseComplete,\n    closeComplete,\n    noData,\n    portalSuspended,\n    copyDone,\n    replicationStart,\n    emptyQuery,\n    ReadyForQueryMessage,\n    CommandCompleteMessage,\n    CopyDataMessage,\n    CopyResponse,\n    NotificationResponseMessage,\n    RowDescriptionMessage,\n    ParameterDescriptionMessage,\n    Field,\n    DataRowMessage,\n    ParameterStatusMessage,\n    BackendKeyDataMessage,\n    DatabaseError,\n    BackendMessage,\n    MessageName,\n    AuthenticationMD5Password,\n    NoticeMessage\n} from './messages';\nimport { BufferReader } from './buffer-reader';\nimport { strict as assert } from 'node:assert/strict';\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1;\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4;\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;\n\nexport type Packet = {\n    code: number;\n    packet: Buffer;\n};\n\nconst emptyBuffer = Buffer.allocUnsafe(0);\n\ntype StreamOptions = TransformOptions & {\n    mode: Mode;\n};\n\nconst enum MessageCodes {\n    DataRow = 0x44, // D\n    ParseComplete = 0x31, // 1\n    BindComplete = 0x32, // 2\n    CloseComplete = 0x33, // 3\n    CommandComplete = 0x43, // C\n    ReadyForQuery = 0x5a, // Z\n    NoData = 0x6e, // n\n    NotificationResponse = 0x41, // A\n    AuthenticationResponse = 0x52, // R\n    ParameterStatus = 0x53, // S\n    BackendKeyData = 0x4b, // K\n    ErrorMessage = 0x45, // E\n    NoticeMessage = 0x4e, // N\n    RowDescriptionMessage = 0x54, // T\n    ParameterDescriptionMessage = 0x74, // t\n    PortalSuspended = 0x73, // s\n    ReplicationStart = 0x57, // W\n    EmptyQuery = 0x49, // I\n    CopyIn = 0x47, // G\n    CopyOut = 0x48, // H\n    CopyDone = 0x63, // c\n    CopyData = 0x64 // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void;\n\nexport class Parser {\n    private buffer: Buffer = emptyBuffer;\n    private bufferLength: number = 0;\n    private bufferOffset: number = 0;\n    private reader = new BufferReader();\n    //private mode: Mode;\n\n    // so far the \"index.ts\" calls the constructor without arguments\n    constructor(opts?: StreamOptions) {\n        if (opts?.mode === 'binary') {\n            throw new Error('Binary mode not supported yet');\n        }\n        //this.mode = opts?.mode || 'text';\n    }\n\n    public parse(buffer: Buffer, callback: MessageCallback) {\n        this.mergeBuffer(buffer);\n        const bufferFullLength = this.bufferOffset + this.bufferLength;\n        let offset = this.bufferOffset;\n        while (offset + HEADER_LENGTH <= bufferFullLength) {\n            // code is 1 byte long - it identifies the message type\n            const code = this.buffer[offset];\n            // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n            const length = this.buffer.readUInt32BE(offset + CODE_LENGTH);\n            const fullMessageLength = CODE_LENGTH + length;\n            if (fullMessageLength + offset <= bufferFullLength) {\n                const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);\n                callback(message);\n                offset += fullMessageLength;\n            } else {\n                break;\n            }\n        }\n        if (offset === bufferFullLength) {\n            // No more use for the buffer\n            this.buffer = emptyBuffer;\n            this.bufferLength = 0;\n            this.bufferOffset = 0;\n        } else {\n            // Adjust the cursors of remainingBuffer\n            this.bufferLength = bufferFullLength - offset;\n            this.bufferOffset = offset;\n        }\n    }\n\n    private mergeBuffer(buffer: Buffer): void {\n        if (this.bufferLength > 0) {\n            const newLength = this.bufferLength + buffer.byteLength;\n            const newFullLength = newLength + this.bufferOffset;\n            if (newFullLength > this.buffer.byteLength) {\n                // We can't concat the new buffer with the remaining one\n                let newBuffer: Buffer;\n                if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n                    // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n                    newBuffer = this.buffer;\n                } else {\n                    // Allocate a new larger buffer\n                    let newBufferLength = this.buffer.byteLength * 2;\n                    while (newLength >= newBufferLength) {\n                        newBufferLength *= 2;\n                    }\n                    newBuffer = Buffer.allocUnsafe(newBufferLength);\n                }\n                // Move the remaining buffer to the new one\n                this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);\n                this.buffer = newBuffer;\n                this.bufferOffset = 0;\n            }\n            // Concat the new buffer with the remaining one\n            buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);\n            this.bufferLength = newLength;\n        } else {\n            this.buffer = buffer;\n            this.bufferOffset = 0;\n            this.bufferLength = buffer.byteLength;\n        }\n    }\n\n    private handlePacket(offset: number, code: number, length: number, bytes: Buffer): BackendMessage {\n        switch (code) {\n            case MessageCodes.BindComplete:\n                return bindComplete;\n            case MessageCodes.ParseComplete:\n                return parseComplete;\n            case MessageCodes.CloseComplete:\n                return closeComplete;\n            case MessageCodes.NoData:\n                return noData;\n            case MessageCodes.PortalSuspended:\n                return portalSuspended;\n            case MessageCodes.CopyDone:\n                return copyDone;\n            case MessageCodes.ReplicationStart:\n                return replicationStart;\n            case MessageCodes.EmptyQuery:\n                return emptyQuery;\n            case MessageCodes.DataRow:\n                return this.parseDataRowMessage(offset, length, bytes);\n            case MessageCodes.CommandComplete:\n                return this.parseCommandCompleteMessage(offset, length, bytes);\n            case MessageCodes.ReadyForQuery:\n                return this.parseReadyForQueryMessage(offset, length, bytes);\n            case MessageCodes.NotificationResponse:\n                return this.parseNotificationMessage(offset, length, bytes);\n            case MessageCodes.AuthenticationResponse:\n                return this.parseAuthenticationResponse(offset, length, bytes);\n            case MessageCodes.ParameterStatus:\n                return this.parseParameterStatusMessage(offset, length, bytes);\n            case MessageCodes.BackendKeyData:\n                return this.parseBackendKeyData(offset, length, bytes);\n            case MessageCodes.ErrorMessage:\n                return this.parseErrorMessage(offset, length, bytes, 'error');\n            case MessageCodes.NoticeMessage:\n                return this.parseErrorMessage(offset, length, bytes, 'notice');\n            case MessageCodes.RowDescriptionMessage:\n                return this.parseRowDescriptionMessage(offset, length, bytes);\n            case MessageCodes.ParameterDescriptionMessage:\n                return this.parseParameterDescriptionMessage(offset, length, bytes);\n            case MessageCodes.CopyIn:\n                return this.parseCopyInMessage(offset, length, bytes);\n            case MessageCodes.CopyOut:\n                return this.parseCopyOutMessage(offset, length, bytes);\n            case MessageCodes.CopyData:\n                return this.parseCopyData(offset, length, bytes);\n            default:\n                assert.fail(`unknown message code: ${code.toString(16)}`);\n        }\n    }\n\n    private parseReadyForQueryMessage(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const status = this.reader.string(1);\n        return new ReadyForQueryMessage(length, status);\n    }\n\n    private parseCommandCompleteMessage(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const text = this.reader.cstring();\n        return new CommandCompleteMessage(length, text);\n    }\n\n    private parseCopyData(offset: number, length: number, bytes: Buffer) {\n        const chunk = bytes.slice(offset, offset + (length - 4));\n        return new CopyDataMessage(length, chunk);\n    }\n\n    private parseCopyInMessage(offset: number, length: number, bytes: Buffer) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyInResponse');\n    }\n\n    private parseCopyOutMessage(offset: number, length: number, bytes: Buffer) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse');\n    }\n\n    private parseCopyMessage(offset: number, length: number, bytes: Buffer, messageName: MessageName) {\n        this.reader.setBuffer(offset, bytes);\n        const isBinary = this.reader.byte() !== 0;\n        const columnCount = this.reader.int16();\n        const message = new CopyResponse(length, messageName, isBinary, columnCount);\n        for (let i = 0; i < columnCount; i++) {\n            message.columnTypes[i] = this.reader.int16();\n        }\n        return message;\n    }\n\n    private parseNotificationMessage(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const processId = this.reader.int32();\n        const channel = this.reader.cstring();\n        const payload = this.reader.cstring();\n        return new NotificationResponseMessage(length, processId, channel, payload);\n    }\n\n    private parseRowDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const message = new RowDescriptionMessage(length, fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            message.fields[i] = this.parseField();\n        }\n        return message;\n    }\n\n    private parseField(): Field {\n        const name = this.reader.cstring();\n        const tableID = this.reader.int32();\n        const columnID = this.reader.int16();\n        const dataTypeID = this.reader.int32();\n        const dataTypeSize = this.reader.int16();\n        const dataTypeModifier = this.reader.int32();\n        const mode = this.reader.int16() === 0 ? 'text' : 'binary';\n        return new Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);\n    }\n\n    private parseParameterDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const parameterCount = this.reader.int16();\n        const message = new ParameterDescriptionMessage(length, parameterCount);\n        for (let i = 0; i < parameterCount; i++) {\n            message.dataTypeIDs[i] = this.reader.int32();\n        }\n        return message;\n    }\n\n    private parseDataRowMessage(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const fields: any[] = new Array(fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            const len = this.reader.int32();\n            // a -1 for length means the value of the field is null\n            fields[i] = len === -1 ? null : this.reader.string(len);\n        }\n        return new DataRowMessage(length, fields);\n    }\n\n    private parseParameterStatusMessage(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const name = this.reader.cstring();\n        const value = this.reader.cstring();\n        return new ParameterStatusMessage(length, name, value);\n    }\n\n    private parseBackendKeyData(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const processID = this.reader.int32();\n        const secretKey = this.reader.int32();\n        return new BackendKeyDataMessage(length, processID, secretKey);\n    }\n\n    public parseAuthenticationResponse(offset: number, length: number, bytes: Buffer) {\n        this.reader.setBuffer(offset, bytes);\n        const code = this.reader.int32();\n        // TODO(bmc): maybe better types here\n        const message: BackendMessage & any = {\n            name: 'authenticationOk',\n            length\n        };\n\n        switch (code) {\n            case 0: // AuthenticationOk\n                break;\n            case 3: // AuthenticationCleartextPassword\n                if (message.length === 8) {\n                    message.name = 'authenticationCleartextPassword';\n                }\n                break;\n            case 5: // AuthenticationMD5Password\n                if (message.length === 12) {\n                    message.name = 'authenticationMD5Password';\n                    const salt = this.reader.bytes(4);\n                    return new AuthenticationMD5Password(length, salt);\n                }\n                break;\n            case 10: // AuthenticationSASL\n                message.name = 'authenticationSASL';\n                message.mechanisms = [];\n                let mechanism: string;\n                do {\n                    mechanism = this.reader.cstring();\n\n                    if (mechanism) {\n                        message.mechanisms.push(mechanism);\n                    }\n                } while (mechanism);\n                break;\n            case 11: // AuthenticationSASLContinue\n                message.name = 'authenticationSASLContinue';\n                message.data = this.reader.string(length - 8);\n                break;\n            case 12: // AuthenticationSASLFinal\n                message.name = 'authenticationSASLFinal';\n                message.data = this.reader.string(length - 8);\n                break;\n            default:\n                throw new Error('Unknown authenticationOk message type ' + code);\n        }\n        return message;\n    }\n\n    private parseErrorMessage(offset: number, length: number, bytes: Buffer, name: MessageName) {\n        this.reader.setBuffer(offset, bytes);\n        const fields: Record<string, string> = {};\n        let fieldType = this.reader.string(1);\n        while (fieldType !== '\\0') {\n            fields[fieldType] = this.reader.cstring();\n            fieldType = this.reader.string(1);\n        }\n\n        const messageValue = fields.M;\n\n        const message =\n            name === 'notice' ? new NoticeMessage(length, messageValue) : new DatabaseError(messageValue, length, name);\n\n        message.severity = fields.S;\n        message.code = fields.C;\n        message.detail = fields.D;\n        message.hint = fields.H;\n        message.position = fields.P;\n        message.internalPosition = fields.p;\n        message.internalQuery = fields.q;\n        message.where = fields.W;\n        message.schema = fields.s;\n        message.table = fields.t;\n        message.column = fields.c;\n        message.dataType = fields.d;\n        message.constraint = fields.n;\n        message.file = fields.F;\n        message.line = fields.L;\n        message.routine = fields.R;\n        return message;\n    }\n}\n"],"version":3}