{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\outbound-serializer.test.ts","mappings":"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","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\outbound-serializer.test.ts"],"sourcesContent":["import { strict as assert } from 'node:assert/strict';\r\nimport { serialize } from './serializer';\r\nimport BufferList from './testing/buffer-list';\r\n\r\ndescribe('serializer', () => {\r\n    it('builds startup message', function () {\r\n        const actual = serialize.startup({\r\n            user: 'brian',\r\n            database: 'bang'\r\n        });\r\n        assert.deepEqual(\r\n            actual,\r\n            new BufferList()\r\n                .addInt16(3)\r\n                .addInt16(0)\r\n                .addCString('user')\r\n                .addCString('brian')\r\n                .addCString('database')\r\n                .addCString('bang')\r\n                .addCString('client_encoding')\r\n                .addCString('UTF8')\r\n                .addCString('')\r\n                .join(true)\r\n        );\r\n    });\r\n\r\n    it('builds password message', function () {\r\n        const actual = serialize.password('!');\r\n        assert.deepEqual(actual, new BufferList().addCString('!').join(true, 'p'));\r\n    });\r\n\r\n    it('builds request ssl message', function () {\r\n        const actual = serialize.requestSsl();\r\n        const expected = new BufferList().addInt32(80877103).join(true);\r\n        assert.deepEqual(actual, expected);\r\n    });\r\n\r\n    it('builds SASLInitialResponseMessage message', function () {\r\n        const actual = serialize.sendSASLInitialResponseMessage('mech', 'data');\r\n        assert.deepEqual(actual, new BufferList().addCString('mech').addInt32(4).addString('data').join(true, 'p'));\r\n    });\r\n\r\n    it('builds SCRAMClientFinalMessage message', function () {\r\n        const actual = serialize.sendSCRAMClientFinalMessage('data');\r\n        assert.deepEqual(actual, new BufferList().addString('data').join(true, 'p'));\r\n    });\r\n\r\n    it('builds query message', function () {\r\n        var txt = 'select * from boom';\r\n        const actual = serialize.query(txt);\r\n        assert.deepEqual(actual, new BufferList().addCString(txt).join(true, 'Q'));\r\n    });\r\n\r\n    describe('parse message', () => {\r\n        it('builds parse message', function () {\r\n            const actual = serialize.parse({ text: '!' });\r\n            var expected = new BufferList().addCString('').addCString('!').addInt16(0).join(true, 'P');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n\r\n        it('builds parse message with named query', function () {\r\n            const actual = serialize.parse({\r\n                name: 'boom',\r\n                text: 'select * from boom',\r\n                types: []\r\n            });\r\n            var expected = new BufferList()\r\n                .addCString('boom')\r\n                .addCString('select * from boom')\r\n                .addInt16(0)\r\n                .join(true, 'P');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n\r\n        it('with multiple parameters', function () {\r\n            const actual = serialize.parse({\r\n                name: 'force',\r\n                text: 'select * from bang where name = $1',\r\n                types: [1, 2, 3, 4]\r\n            });\r\n            var expected = new BufferList()\r\n                .addCString('force')\r\n                .addCString('select * from bang where name = $1')\r\n                .addInt16(4)\r\n                .addInt32(1)\r\n                .addInt32(2)\r\n                .addInt32(3)\r\n                .addInt32(4)\r\n                .join(true, 'P');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n    });\r\n\r\n    describe('bind messages', function () {\r\n        it('with no values', function () {\r\n            const actual = serialize.bind();\r\n\r\n            var expectedBuffer = new BufferList()\r\n                .addCString('')\r\n                .addCString('')\r\n                .addInt16(0)\r\n                .addInt16(0)\r\n                .addInt16(0)\r\n                .join(true, 'B');\r\n            assert.deepEqual(actual, expectedBuffer);\r\n        });\r\n\r\n        it('with named statement, portal, and values', function () {\r\n            const actual = serialize.bind({\r\n                portal: 'bang',\r\n                statement: 'woo',\r\n                values: ['1', 'hi', null, 'zing']\r\n            });\r\n            var expectedBuffer = new BufferList()\r\n                .addCString('bang') // portal name\r\n                .addCString('woo') // statement name\r\n                .addInt16(4)\r\n                .addInt16(0)\r\n                .addInt16(0)\r\n                .addInt16(0)\r\n                .addInt16(0)\r\n                .addInt16(4)\r\n                .addInt32(1)\r\n                .add(Buffer.from('1'))\r\n                .addInt32(2)\r\n                .add(Buffer.from('hi'))\r\n                .addInt32(-1)\r\n                .addInt32(4)\r\n                .add(Buffer.from('zing'))\r\n                .addInt16(0)\r\n                .join(true, 'B');\r\n            assert.deepEqual(actual, expectedBuffer);\r\n        });\r\n    });\r\n\r\n    it('with custom valueMapper', function () {\r\n        const actual = serialize.bind({\r\n            portal: 'bang',\r\n            statement: 'woo',\r\n            values: ['1', 'hi', null, 'zing'],\r\n            valueMapper: () => null\r\n        });\r\n        var expectedBuffer = new BufferList()\r\n            .addCString('bang') // portal name\r\n            .addCString('woo') // statement name\r\n            .addInt16(4)\r\n            .addInt16(0)\r\n            .addInt16(0)\r\n            .addInt16(0)\r\n            .addInt16(0)\r\n            .addInt16(4)\r\n            .addInt32(-1)\r\n            .addInt32(-1)\r\n            .addInt32(-1)\r\n            .addInt32(-1)\r\n            .addInt16(0)\r\n            .join(true, 'B');\r\n        assert.deepEqual(actual, expectedBuffer);\r\n    });\r\n\r\n    it('with named statement, portal, and buffer value', function () {\r\n        const actual = serialize.bind({\r\n            portal: 'bang',\r\n            statement: 'woo',\r\n            values: ['1', 'hi', null, Buffer.from('zing', 'utf8')]\r\n        });\r\n        var expectedBuffer = new BufferList()\r\n            .addCString('bang') // portal name\r\n            .addCString('woo') // statement name\r\n            .addInt16(4) // value count\r\n            .addInt16(0) // string\r\n            .addInt16(0) // string\r\n            .addInt16(0) // string\r\n            .addInt16(1) // binary\r\n            .addInt16(4)\r\n            .addInt32(1)\r\n            .add(Buffer.from('1'))\r\n            .addInt32(2)\r\n            .add(Buffer.from('hi'))\r\n            .addInt32(-1)\r\n            .addInt32(4)\r\n            .add(Buffer.from('zing', 'utf-8'))\r\n            .addInt16(0)\r\n            .join(true, 'B');\r\n        assert.deepEqual(actual, expectedBuffer);\r\n    });\r\n\r\n    describe('builds execute message', function () {\r\n        it('for unamed portal with no row limit', function () {\r\n            const actual = serialize.execute();\r\n            var expectedBuffer = new BufferList().addCString('').addInt32(0).join(true, 'E');\r\n            assert.deepEqual(actual, expectedBuffer);\r\n        });\r\n\r\n        it('for named portal with row limit', function () {\r\n            const actual = serialize.execute({\r\n                portal: 'my favorite portal',\r\n                rows: 100\r\n            });\r\n            var expectedBuffer = new BufferList().addCString('my favorite portal').addInt32(100).join(true, 'E');\r\n            assert.deepEqual(actual, expectedBuffer);\r\n        });\r\n    });\r\n\r\n    it('builds flush command', function () {\r\n        const actual = serialize.flush();\r\n        var expected = new BufferList().join(true, 'H');\r\n        assert.deepEqual(actual, expected);\r\n    });\r\n\r\n    it('builds sync command', function () {\r\n        const actual = serialize.sync();\r\n        var expected = new BufferList().join(true, 'S');\r\n        assert.deepEqual(actual, expected);\r\n    });\r\n\r\n    it('builds end command', function () {\r\n        const actual = serialize.end();\r\n        var expected = Buffer.from([0x58, 0, 0, 0, 4]);\r\n        assert.deepEqual(actual, expected);\r\n    });\r\n\r\n    describe('builds describe command', function () {\r\n        it('describe statement', function () {\r\n            const actual = serialize.describe({ type: 'S', name: 'bang' });\r\n            var expected = new BufferList().addChar('S').addCString('bang').join(true, 'D');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n\r\n        it('describe unnamed portal', function () {\r\n            const actual = serialize.describe({ type: 'P' });\r\n            var expected = new BufferList().addChar('P').addCString('').join(true, 'D');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n    });\r\n\r\n    describe('builds close command', function () {\r\n        it('describe statement', function () {\r\n            const actual = serialize.close({ type: 'S', name: 'bang' });\r\n            var expected = new BufferList().addChar('S').addCString('bang').join(true, 'C');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n\r\n        it('describe unnamed portal', function () {\r\n            const actual = serialize.close({ type: 'P' });\r\n            var expected = new BufferList().addChar('P').addCString('').join(true, 'C');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n    });\r\n\r\n    describe('copy messages', function () {\r\n        it('builds copyFromChunk', () => {\r\n            const actual = serialize.copyData(Buffer.from([1, 2, 3]));\r\n            const expected = new BufferList().add(Buffer.from([1, 2, 3])).join(true, 'd');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n\r\n        it('builds copy fail', () => {\r\n            const actual = serialize.copyFail('err!');\r\n            const expected = new BufferList().addCString('err!').join(true, 'f');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n\r\n        it('builds copy done', () => {\r\n            const actual = serialize.copyDone();\r\n            const expected = new BufferList().join(true, 'c');\r\n            assert.deepEqual(actual, expected);\r\n        });\r\n    });\r\n\r\n    it('builds cancel message', () => {\r\n        const actual = serialize.cancel(3, 4);\r\n        const expected = new BufferList().addInt16(1234).addInt16(5678).addInt32(3).addInt32(4).join(true);\r\n        assert.deepEqual(actual, expected);\r\n    });\r\n});\r\n"],"version":3}