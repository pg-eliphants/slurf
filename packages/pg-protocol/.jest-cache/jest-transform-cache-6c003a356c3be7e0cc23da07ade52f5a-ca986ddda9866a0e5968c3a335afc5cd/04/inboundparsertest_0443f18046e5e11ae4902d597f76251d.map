{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\inbound-parser.test.ts","mappings":"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","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\inbound-parser.test.ts"],"sourcesContent":["import buffers from './testing/test-buffers';\nimport BufferList from './testing/buffer-list';\nimport { parse } from '.';\n\nimport { PassThrough } from 'stream';\nimport { BackendMessage } from './messages';\n\nvar authOkBuffer = buffers.authenticationOk();\nvar paramStatusBuffer = buffers.parameterStatus('client_encoding', 'UTF8');\nvar readyForQueryBuffer = buffers.readyForQuery();\nvar backendKeyDataBuffer = buffers.backendKeyData(1, 2);\nvar commandCompleteBuffer = buffers.commandComplete('SELECT 3');\nvar parseCompleteBuffer = buffers.parseComplete();\nvar bindCompleteBuffer = buffers.bindComplete();\nvar portalSuspendedBuffer = buffers.portalSuspended();\n\n/*var addRow = function (bufferList: BufferList, name: string, offset: number) {\n    return bufferList\n        .addCString(name) // field name\n        .addInt32(offset++) // table id\n        .addInt16(offset++) // attribute of column number\n        .addInt32(offset++) // objectId of field's data type\n        .addInt16(offset++) // datatype size\n        .addInt32(offset++) // type modifier\n        .addInt16(0); // format code, 0 => text\n};\n*/\nvar row1 = {\n    name: 'id',\n    tableID: 1,\n    attributeNumber: 2,\n    dataTypeID: 3,\n    dataTypeSize: 4,\n    typeModifier: 5,\n    formatCode: 0\n};\nvar oneRowDescBuff = buffers.rowDescription([row1]);\nrow1.name = 'bang';\n\nvar twoRowBuf = buffers.rowDescription([\n    row1,\n    {\n        name: 'whoah',\n        tableID: 10,\n        attributeNumber: 11,\n        dataTypeID: 12,\n        dataTypeSize: 13,\n        typeModifier: 14,\n        formatCode: 0\n    }\n]);\n\nvar emptyRowFieldBuf = new BufferList().addInt16(0).join(true, 'D');\n\nvar emptyRowFieldBuf = buffers.dataRow([]);\n\nvar oneFieldBuf = new BufferList()\n    .addInt16(1) // number of fields\n    .addInt32(5) // length of bytes of fields\n    .addCString('test')\n    .join(true, 'D');\n\nvar oneFieldBuf = buffers.dataRow(['test']);\n\nvar expectedAuthenticationOkayMessage = {\n    name: 'authenticationOk',\n    length: 8\n};\n\nvar expectedParameterStatusMessage = {\n    name: 'parameterStatus',\n    parameterName: 'client_encoding',\n    parameterValue: 'UTF8',\n    length: 25\n};\n\nvar expectedBackendKeyDataMessage = {\n    name: 'backendKeyData',\n    processID: 1,\n    secretKey: 2\n};\n\nvar expectedReadyForQueryMessage = {\n    name: 'readyForQuery',\n    length: 5,\n    status: 'I'\n};\n\nvar expectedCommandCompleteMessage = {\n    name: 'commandComplete',\n    length: 13,\n    text: 'SELECT 3'\n};\nvar emptyRowDescriptionBuffer = new BufferList()\n    .addInt16(0) // number of fields\n    .join(true, 'T');\n\nvar expectedEmptyRowDescriptionMessage = {\n    name: 'rowDescription',\n    length: 6,\n    fieldCount: 0,\n    fields: []\n};\nvar expectedOneRowMessage = {\n    name: 'rowDescription',\n    length: 27,\n    fieldCount: 1,\n    fields: [\n        {\n            name: 'id',\n            tableID: 1,\n            columnID: 2,\n            dataTypeID: 3,\n            dataTypeSize: 4,\n            dataTypeModifier: 5,\n            format: 'text'\n        }\n    ]\n};\n\nvar expectedTwoRowMessage = {\n    name: 'rowDescription',\n    length: 53,\n    fieldCount: 2,\n    fields: [\n        {\n            name: 'bang',\n            tableID: 1,\n            columnID: 2,\n            dataTypeID: 3,\n            dataTypeSize: 4,\n            dataTypeModifier: 5,\n            format: 'text'\n        },\n        {\n            name: 'whoah',\n            tableID: 10,\n            columnID: 11,\n            dataTypeID: 12,\n            dataTypeSize: 13,\n            dataTypeModifier: 14,\n            format: 'text'\n        }\n    ]\n};\n\nvar emptyParameterDescriptionBuffer = new BufferList()\n    .addInt16(0) // number of parameters\n    .join(true, 't');\n\nvar oneParameterDescBuf = buffers.parameterDescription([1111]);\n\nvar twoParameterDescBuf = buffers.parameterDescription([2222, 3333]);\n\nvar expectedEmptyParameterDescriptionMessage = {\n    name: 'parameterDescription',\n    length: 6,\n    parameterCount: 0,\n    dataTypeIDs: []\n};\n\nvar expectedOneParameterMessage = {\n    name: 'parameterDescription',\n    length: 10,\n    parameterCount: 1,\n    dataTypeIDs: [1111]\n};\n\nvar expectedTwoParameterMessage = {\n    name: 'parameterDescription',\n    length: 14,\n    parameterCount: 2,\n    dataTypeIDs: [2222, 3333]\n};\n\nvar testForMessage = function (buffer: Buffer, expectedMessage: any) {\n    it('recieves and parses ' + expectedMessage.name, async () => {\n        const messages = await parseBuffers([buffer]);\n        const [lastMessage] = messages;\n\n        for (const key in expectedMessage) {\n            expect((lastMessage as any)[key]).toEqual(expectedMessage[key]);\n        }\n    });\n};\n\nvar plainPasswordBuffer = buffers.authenticationCleartextPassword();\nvar md5PasswordBuffer = buffers.authenticationMD5Password();\nvar SASLBuffer = buffers.authenticationSASL();\nvar SASLContinueBuffer = buffers.authenticationSASLContinue();\nvar SASLFinalBuffer = buffers.authenticationSASLFinal();\n\nvar expectedPlainPasswordMessage = {\n    name: 'authenticationCleartextPassword'\n};\n\nvar expectedMD5PasswordMessage = {\n    name: 'authenticationMD5Password',\n    salt: Buffer.from([1, 2, 3, 4])\n};\n\nvar expectedSASLMessage = {\n    name: 'authenticationSASL',\n    mechanisms: ['SCRAM-SHA-256']\n};\n\nvar expectedSASLContinueMessage = {\n    name: 'authenticationSASLContinue',\n    data: 'data'\n};\n\nvar expectedSASLFinalMessage = {\n    name: 'authenticationSASLFinal',\n    data: 'data'\n};\n\nvar notificationResponseBuffer = buffers.notification(4, 'hi', 'boom');\nvar expectedNotificationResponseMessage = {\n    name: 'notification',\n    processId: 4,\n    channel: 'hi',\n    payload: 'boom'\n};\n\nconst parseBuffers = async (buffers: Buffer[]): Promise<BackendMessage[]> => {\n    const stream = new PassThrough();\n    for (const buffer of buffers) {\n        stream.write(buffer);\n    }\n    stream.end();\n    const msgs: BackendMessage[] = [];\n    await parse(stream, (msg) => msgs.push(msg));\n    return msgs;\n};\n\ndescribe('PgPacketStream', function () {\n    testForMessage(authOkBuffer, expectedAuthenticationOkayMessage);\n    testForMessage(plainPasswordBuffer, expectedPlainPasswordMessage);\n    testForMessage(md5PasswordBuffer, expectedMD5PasswordMessage);\n    testForMessage(SASLBuffer, expectedSASLMessage);\n    testForMessage(SASLContinueBuffer, expectedSASLContinueMessage);\n\n    // this exercises a found bug in the parser:\n    // https://github.com/brianc/node-postgres/pull/2210#issuecomment-627626084\n    // and adds a test which is deterministic, rather than relying on network packet chunking\n    const extendedSASLContinueBuffer = Buffer.concat([SASLContinueBuffer, Buffer.from([1, 2, 3, 4])]);\n    testForMessage(extendedSASLContinueBuffer, expectedSASLContinueMessage);\n\n    testForMessage(SASLFinalBuffer, expectedSASLFinalMessage);\n\n    // this exercises a found bug in the parser:\n    // https://github.com/brianc/node-postgres/pull/2210#issuecomment-627626084\n    // and adds a test which is deterministic, rather than relying on network packet chunking\n    const extendedSASLFinalBuffer = Buffer.concat([SASLFinalBuffer, Buffer.from([1, 2, 4, 5])]);\n    testForMessage(extendedSASLFinalBuffer, expectedSASLFinalMessage);\n\n    testForMessage(paramStatusBuffer, expectedParameterStatusMessage);\n    testForMessage(backendKeyDataBuffer, expectedBackendKeyDataMessage);\n    testForMessage(readyForQueryBuffer, expectedReadyForQueryMessage);\n    testForMessage(commandCompleteBuffer, expectedCommandCompleteMessage);\n    testForMessage(notificationResponseBuffer, expectedNotificationResponseMessage);\n    testForMessage(buffers.emptyQuery(), {\n        name: 'emptyQuery',\n        length: 4\n    });\n\n    testForMessage(Buffer.from([0x6e, 0, 0, 0, 4]), {\n        name: 'noData'\n    });\n\n    describe('rowDescription messages', function () {\n        testForMessage(emptyRowDescriptionBuffer, expectedEmptyRowDescriptionMessage);\n        testForMessage(oneRowDescBuff, expectedOneRowMessage);\n        testForMessage(twoRowBuf, expectedTwoRowMessage);\n    });\n\n    describe('parameterDescription messages', function () {\n        testForMessage(emptyParameterDescriptionBuffer, expectedEmptyParameterDescriptionMessage);\n        testForMessage(oneParameterDescBuf, expectedOneParameterMessage);\n        testForMessage(twoParameterDescBuf, expectedTwoParameterMessage);\n    });\n\n    describe('parsing rows', function () {\n        describe('parsing empty row', function () {\n            testForMessage(emptyRowFieldBuf, {\n                name: 'dataRow',\n                fieldCount: 0\n            });\n        });\n\n        describe('parsing data row with fields', function () {\n            testForMessage(oneFieldBuf, {\n                name: 'dataRow',\n                fieldCount: 1,\n                fields: ['test']\n            });\n        });\n    });\n\n    describe('notice message', function () {\n        // this uses the same logic as error message\n        var buff = buffers.notice([{ type: 'C', value: 'code' }]);\n        testForMessage(buff, {\n            name: 'notice',\n            code: 'code'\n        });\n    });\n\n    testForMessage(buffers.error([]), {\n        name: 'error'\n    });\n\n    describe('with all the fields', function () {\n        var buffer = buffers.error([\n            {\n                type: 'S',\n                value: 'ERROR'\n            },\n            {\n                type: 'C',\n                value: 'code'\n            },\n            {\n                type: 'M',\n                value: 'message'\n            },\n            {\n                type: 'D',\n                value: 'details'\n            },\n            {\n                type: 'H',\n                value: 'hint'\n            },\n            {\n                type: 'P',\n                value: '100'\n            },\n            {\n                type: 'p',\n                value: '101'\n            },\n            {\n                type: 'q',\n                value: 'query'\n            },\n            {\n                type: 'W',\n                value: 'where'\n            },\n            {\n                type: 'F',\n                value: 'file'\n            },\n            {\n                type: 'L',\n                value: 'line'\n            },\n            {\n                type: 'R',\n                value: 'routine'\n            },\n            {\n                type: 'Z', // ignored\n                value: 'alsdkf'\n            }\n        ]);\n\n        testForMessage(buffer, {\n            name: 'error',\n            severity: 'ERROR',\n            code: 'code',\n            message: 'message',\n            detail: 'details',\n            hint: 'hint',\n            position: '100',\n            internalPosition: '101',\n            internalQuery: 'query',\n            where: 'where',\n            file: 'file',\n            line: 'line',\n            routine: 'routine'\n        });\n    });\n\n    testForMessage(parseCompleteBuffer, {\n        name: 'parseComplete'\n    });\n\n    testForMessage(bindCompleteBuffer, {\n        name: 'bindComplete'\n    });\n\n    testForMessage(bindCompleteBuffer, {\n        name: 'bindComplete'\n    });\n\n    testForMessage(buffers.closeComplete(), {\n        name: 'closeComplete'\n    });\n\n    describe('parses portal suspended message', function () {\n        testForMessage(portalSuspendedBuffer, {\n            name: 'portalSuspended'\n        });\n    });\n\n    describe('parses replication start message', function () {\n        testForMessage(Buffer.from([0x57, 0x00, 0x00, 0x00, 0x04]), {\n            name: 'replicationStart',\n            length: 4\n        });\n    });\n\n    describe('copy', () => {\n        testForMessage(buffers.copyIn(0), {\n            name: 'copyInResponse',\n            length: 7,\n            binary: false,\n            columnTypes: []\n        });\n\n        testForMessage(buffers.copyIn(2), {\n            name: 'copyInResponse',\n            length: 11,\n            binary: false,\n            columnTypes: [0, 1]\n        });\n\n        testForMessage(buffers.copyOut(0), {\n            name: 'copyOutResponse',\n            length: 7,\n            binary: false,\n            columnTypes: []\n        });\n\n        testForMessage(buffers.copyOut(3), {\n            name: 'copyOutResponse',\n            length: 13,\n            binary: false,\n            columnTypes: [0, 1, 2]\n        });\n\n        testForMessage(buffers.copyDone(), {\n            name: 'copyDone',\n            length: 4\n        });\n\n        testForMessage(buffers.copyData(Buffer.from([5, 6, 7])), {\n            name: 'copyData',\n            length: 7,\n            chunk: Buffer.from([5, 6, 7])\n        });\n    });\n\n    // since the data message on a stream can randomly divide the incomming\n    // tcp packets anywhere, we need to make sure we can parse every single\n    // split on a tcp message\n    describe('split buffer, single message parsing', function () {\n        var fullBuffer = buffers.dataRow([null, 'bang', 'zug zug', null, '!']);\n\n        it('parses when full buffer comes in', async function () {\n            const messages = await parseBuffers([fullBuffer]);\n            const message = messages[0] as any;\n            expect(message.fields.length).toBe(5);\n            expect(message.fields[0]).toBeNull();\n            expect(message.fields[1]).toBe('bang');\n            expect(message.fields[2]).toBe('zug zug');\n            expect(message.fields[3]).toBeNull();\n            expect(message.fields[4]).toBe('!');\n        });\n\n        var testMessageRecievedAfterSpiltAt = async function (split: number) {\n            var firstBuffer = Buffer.alloc(fullBuffer.length - split);\n            var secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length);\n            fullBuffer.copy(firstBuffer, 0, 0);\n            fullBuffer.copy(secondBuffer, 0, firstBuffer.length);\n            const messages = await parseBuffers([fullBuffer]);\n            const message = messages[0] as any;\n            expect(message.fields.length).toBe(5);\n            expect(message.fields[0]).toBe(null);\n            expect(message.fields[1]).toBe('bang');\n            expect(message.fields[2]).toBe('zug zug');\n            expect(message.fields[3]).toBe(null);\n            expect(message.fields[4]).toBe('!');\n        };\n\n        it('parses when split in the middle', function () {\n            testMessageRecievedAfterSpiltAt(6);\n        });\n\n        it('parses when split at end', function () {\n            testMessageRecievedAfterSpiltAt(2);\n        });\n\n        it('parses when split at beginning', function () {\n            testMessageRecievedAfterSpiltAt(fullBuffer.length - 2);\n            testMessageRecievedAfterSpiltAt(fullBuffer.length - 1);\n            testMessageRecievedAfterSpiltAt(fullBuffer.length - 5);\n        });\n    });\n\n    describe('split buffer, multiple message parsing', function () {\n        var dataRowBuffer = buffers.dataRow(['!']);\n        var readyForQueryBuffer = buffers.readyForQuery();\n        var fullBuffer = Buffer.alloc(dataRowBuffer.length + readyForQueryBuffer.length);\n        dataRowBuffer.copy(fullBuffer, 0, 0);\n        readyForQueryBuffer.copy(fullBuffer, dataRowBuffer.length, 0);\n\n        var verifyMessages = function (messages: any[]) {\n            expect(messages.length).toBe(2);\n            expect(messages[0]).toEqual({\n                name: 'dataRow',\n                fieldCount: 1,\n                length: 11,\n                fields: ['!']\n            });\n            expect(messages[0].fields[0]).toBe('!');\n            expect(messages[1]).toEqual({\n                name: 'readyForQuery',\n                length: 5,\n                status: 'I'\n            });\n        };\n        // sanity check\n        it('recieves both messages when packet is not split', async function () {\n            const messages = await parseBuffers([fullBuffer]);\n            verifyMessages(messages);\n        });\n\n        var splitAndVerifyTwoMessages = async function (split: number) {\n            var firstBuffer = Buffer.alloc(fullBuffer.length - split);\n            var secondBuffer = Buffer.alloc(fullBuffer.length - firstBuffer.length);\n            fullBuffer.copy(firstBuffer, 0, 0);\n            fullBuffer.copy(secondBuffer, 0, firstBuffer.length);\n            const messages = await parseBuffers([firstBuffer, secondBuffer]);\n            verifyMessages(messages);\n        };\n\n        describe('recieves both messages when packet is split', function () {\n            it('in the middle', function () {\n                return splitAndVerifyTwoMessages(11);\n            });\n            it('at the front', function () {\n                return Promise.all([\n                    splitAndVerifyTwoMessages(fullBuffer.length - 1),\n                    splitAndVerifyTwoMessages(fullBuffer.length - 4),\n                    splitAndVerifyTwoMessages(fullBuffer.length - 6)\n                ]);\n            });\n\n            it('at the end', function () {\n                return Promise.all([splitAndVerifyTwoMessages(8), splitAndVerifyTwoMessages(1)]);\n            });\n        });\n    });\n});\n"],"version":3}