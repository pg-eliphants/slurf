16504caf787af27383a65e8443dac578
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serialize = void 0;
const buffer_writer_1 = require("./buffer-writer");
var code;
(function (code) {
    code[code["startup"] = 112] = "startup";
    code[code["query"] = 81] = "query";
    code[code["parse"] = 80] = "parse";
    code[code["bind"] = 66] = "bind";
    code[code["execute"] = 69] = "execute";
    code[code["flush"] = 72] = "flush";
    code[code["sync"] = 83] = "sync";
    code[code["end"] = 88] = "end";
    code[code["close"] = 67] = "close";
    code[code["describe"] = 68] = "describe";
    code[code["copyFromChunk"] = 100] = "copyFromChunk";
    code[code["copyDone"] = 99] = "copyDone";
    code[code["copyFail"] = 102] = "copyFail";
})(code || (code = {}));
const writer = new buffer_writer_1.Writer();
const startup = (opts) => {
    // protocol version
    writer.addInt16(3).addInt16(0);
    for (const key of Object.keys(opts)) {
        writer.addCString(key).addCString(opts[key]);
    }
    writer.addCString('client_encoding').addCString('UTF8');
    var bodyBuffer = writer.addCString('').flush();
    // this message is sent without a code
    var length = bodyBuffer.length + 4;
    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();
};
const requestSsl = () => {
    const response = Buffer.allocUnsafe(8);
    response.writeInt32BE(8, 0);
    response.writeInt32BE(80877103, 4);
    return response;
};
const password = (password) => {
    return writer.addCString(password).flush(112 /* startup */);
};
const sendSASLInitialResponseMessage = function (mechanism, initialResponse) {
    // 0x70 = 'p'
    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);
    return writer.flush(112 /* startup */);
};
const sendSCRAMClientFinalMessage = function (additionalData) {
    return writer.addString(additionalData).flush(112 /* startup */);
};
const query = (text) => {
    return writer.addCString(text).flush(81 /* query */);
};
const emptyArray = [];
const parse = (query) => {
    // expect something like this:
    // { name: 'queryName',
    //   text: 'select * from blah',
    //   types: ['int8', 'bool'] }
    // normalize missing query names to allow for null
    const name = query.name || '';
    if (name.length > 63) {
        /* eslint-disable no-console */
        console.error('Warning! Postgres only supports 63 characters for query names.');
        console.error('You supplied %s (%s)', name, name.length);
        console.error('This can cause conflicts and silent errors executing queries');
        /* eslint-enable no-console */
    }
    const types = query.types || emptyArray;
    var len = types.length;
    var buffer = writer
        .addCString(name) // name of query
        .addCString(query.text) // actual query text
        .addInt16(len);
    for (var i = 0; i < len; i++) {
        buffer.addInt32(types[i]);
    }
    return writer.flush(80 /* parse */);
};
const paramWriter = new buffer_writer_1.Writer();
// make this a const enum so typescript will inline the value
var ParamType;
(function (ParamType) {
    ParamType[ParamType["STRING"] = 0] = "STRING";
    ParamType[ParamType["BINARY"] = 1] = "BINARY";
})(ParamType || (ParamType = {}));
const writeValues = function (values, valueMapper) {
    for (let i = 0; i < values.length; i++) {
        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];
        if (mappedVal == null) {
            // add the param type (string) to the writer
            writer.addInt16(0 /* STRING */);
            // write -1 to the param writer to indicate null
            paramWriter.addInt32(-1);
        }
        else if (mappedVal instanceof Buffer) {
            // add the param type (binary) to the writer
            writer.addInt16(1 /* BINARY */);
            // add the buffer to the param writer
            paramWriter.addInt32(mappedVal.length);
            paramWriter.add(mappedVal);
        }
        else {
            // add the param type (string) to the writer
            writer.addInt16(0 /* STRING */);
            paramWriter.addInt32(Buffer.byteLength(mappedVal));
            paramWriter.addString(mappedVal);
        }
    }
};
const bind = (config = {}) => {
    // normalize config
    const portal = config.portal || '';
    const statement = config.statement || '';
    const binary = config.binary || false;
    const values = config.values || emptyArray;
    const len = values.length;
    writer.addCString(portal).addCString(statement);
    writer.addInt16(len);
    writeValues(values, config.valueMapper);
    writer.addInt16(len);
    writer.add(paramWriter.flush());
    // format code
    writer.addInt16(binary ? 1 /* BINARY */ : 0 /* STRING */);
    return writer.flush(66 /* bind */);
};
const emptyExecute = Buffer.from([69 /* execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);
const execute = (config) => {
    // this is the happy path for most queries
    if (!config || (!config.portal && !config.rows)) {
        return emptyExecute;
    }
    const portal = config.portal || '';
    const rows = config.rows || 0;
    const portalLength = Buffer.byteLength(portal);
    const len = 4 + portalLength + 1 + 4;
    // one extra bit for code
    const buff = Buffer.allocUnsafe(1 + len);
    buff[0] = 69 /* execute */;
    buff.writeInt32BE(len, 1);
    buff.write(portal, 5, 'utf-8');
    buff[portalLength + 5] = 0; // null terminate portal cString
    buff.writeUInt32BE(rows, buff.length - 4);
    return buff;
};
const cancel = (processID, secretKey) => {
    const buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32BE(16, 0);
    buffer.writeInt16BE(1234, 4);
    buffer.writeInt16BE(5678, 6);
    buffer.writeInt32BE(processID, 8);
    buffer.writeInt32BE(secretKey, 12);
    return buffer;
};
const cstringMessage = (code, string) => {
    const stringLen = Buffer.byteLength(string);
    const len = 4 + stringLen + 1;
    // one extra bit for code
    const buffer = Buffer.allocUnsafe(1 + len);
    buffer[0] = code;
    buffer.writeInt32BE(len, 1);
    buffer.write(string, 5, 'utf-8');
    buffer[len] = 0; // null terminate cString
    return buffer;
};
const emptyDescribePortal = writer.addCString('P').flush(68 /* describe */);
const emptyDescribeStatement = writer.addCString('S').flush(68 /* describe */);
const describe = (msg) => {
    return msg.name
        ? cstringMessage(68 /* describe */, `${msg.type}${msg.name || ''}`)
        : msg.type === 'P'
            ? emptyDescribePortal
            : emptyDescribeStatement;
};
const close = (msg) => {
    const text = `${msg.type}${msg.name || ''}`;
    return cstringMessage(67 /* close */, text);
};
const copyData = (chunk) => {
    return writer.add(chunk).flush(100 /* copyFromChunk */);
};
const copyFail = (message) => {
    return cstringMessage(102 /* copyFail */, message);
};
const codeOnlyBuffer = (code) => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);
const flushBuffer = codeOnlyBuffer(72 /* flush */);
const syncBuffer = codeOnlyBuffer(83 /* sync */);
const endBuffer = codeOnlyBuffer(88 /* end */);
const copyDoneBuffer = codeOnlyBuffer(99 /* copyDone */);
const serialize = {
    startup,
    password,
    requestSsl,
    sendSASLInitialResponseMessage,
    sendSCRAMClientFinalMessage,
    query,
    parse,
    bind,
    execute,
    describe,
    close,
    flush: () => flushBuffer,
    sync: () => syncBuffer,
    end: () => endBuffer,
    copyData,
    copyDone: () => copyDoneBuffer,
    copyFail,
    cancel,
};
exports.serialize = serialize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHJlcG9zXFxub2RlLXBvc3RncmVzXFxwYWNrYWdlc1xccGctcHJvdG9jb2xcXHNyY1xcc2VyaWFsaXplci50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFBd0M7QUFFeEMsSUFBVyxJQWNWO0FBZEQsV0FBVyxJQUFJO0lBQ2IsdUNBQWMsQ0FBQTtJQUNkLGtDQUFZLENBQUE7SUFDWixrQ0FBWSxDQUFBO0lBQ1osZ0NBQVcsQ0FBQTtJQUNYLHNDQUFjLENBQUE7SUFDZCxrQ0FBWSxDQUFBO0lBQ1osZ0NBQVcsQ0FBQTtJQUNYLDhCQUFVLENBQUE7SUFDVixrQ0FBWSxDQUFBO0lBQ1osd0NBQWUsQ0FBQTtJQUNmLG1EQUFvQixDQUFBO0lBQ3BCLHdDQUFlLENBQUE7SUFDZix5Q0FBZSxDQUFBO0FBQ2pCLENBQUMsRUFkVSxJQUFJLEtBQUosSUFBSSxRQWNkO0FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxzQkFBTSxFQUFFLENBQUE7QUFFM0IsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUE0QixFQUFVLEVBQUU7SUFDdkQsbUJBQW1CO0lBQ25CLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzlCLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtLQUM3QztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFdkQsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM5QyxzQ0FBc0M7SUFFdEMsSUFBSSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUE7SUFFbEMs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QjtJQUMzQixLQUFLO0lBQ0wsS0FBSztJQUNMLElBQUk7SUFDSixPQUFPO0lBQ1AsUUFBUTtJQUNSLEtBQUs7SUFDTCxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsV0FBVztJQUN4QixJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVTtJQUN0QixHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUztJQUNwQixRQUFRO0lBQ1IsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLGNBQWM7SUFDOUIsUUFBUTtJQUNSLE1BQU07Q0FDUCxDQUFBO0FBRVEsOEJBQVMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXHJlcG9zXFxub2RlLXBvc3RncmVzXFxwYWNrYWdlc1xccGctcHJvdG9jb2xcXHNyY1xcc2VyaWFsaXplci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXcml0ZXIgfSBmcm9tICcuL2J1ZmZlci13cml0ZXInXHJcblxyXG5jb25zdCBlbnVtIGNvZGUge1xyXG4gIHN0YXJ0dXAgPSAweDcwLFxyXG4gIHF1ZXJ5ID0gMHg1MSxcclxuICBwYXJzZSA9IDB4NTAsXHJcbiAgYmluZCA9IDB4NDIsXHJcbiAgZXhlY3V0ZSA9IDB4NDUsXHJcbiAgZmx1c2ggPSAweDQ4LFxyXG4gIHN5bmMgPSAweDUzLFxyXG4gIGVuZCA9IDB4NTgsXHJcbiAgY2xvc2UgPSAweDQzLFxyXG4gIGRlc2NyaWJlID0gMHg0NCxcclxuICBjb3B5RnJvbUNodW5rID0gMHg2NCxcclxuICBjb3B5RG9uZSA9IDB4NjMsXHJcbiAgY29weUZhaWwgPSAweDY2LFxyXG59XHJcblxyXG5jb25zdCB3cml0ZXIgPSBuZXcgV3JpdGVyKClcclxuXHJcbmNvbnN0IHN0YXJ0dXAgPSAob3B0czogUmVjb3JkPHN0cmluZywgc3RyaW5nPik6IEJ1ZmZlciA9PiB7XHJcbiAgLy8gcHJvdG9jb2wgdmVyc2lvblxyXG4gIHdyaXRlci5hZGRJbnQxNigzKS5hZGRJbnQxNigwKVxyXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKG9wdHMpKSB7XHJcbiAgICB3cml0ZXIuYWRkQ1N0cmluZyhrZXkpLmFkZENTdHJpbmcob3B0c1trZXldKVxyXG4gIH1cclxuXHJcbiAgd3JpdGVyLmFkZENTdHJpbmcoJ2NsaWVudF9lbmNvZGluZycpLmFkZENTdHJpbmcoJ1VURjgnKVxyXG5cclxuICB2YXIgYm9keUJ1ZmZlciA9IHdyaXRlci5hZGRDU3RyaW5nKCcnKS5mbHVzaCgpXHJcbiAgLy8gdGhpcyBtZXNzYWdlIGlzIHNlbnQgd2l0aG91dCBhIGNvZGVcclxuXHJcbiAgdmFyIGxlbmd0aCA9IGJvZHlCdWZmZXIubGVuZ3RoICsgNFxyXG5cclxuICByZXR1cm4gbmV3IFdyaXRlcigpLmFkZEludDMyKGxlbmd0aCkuYWRkKGJvZHlCdWZmZXIpLmZsdXNoKClcclxufVxyXG5cclxuY29uc3QgcmVxdWVzdFNzbCA9ICgpOiBCdWZmZXIgPT4ge1xyXG4gIGNvbnN0IHJlc3BvbnNlID0gQnVmZmVyLmFsbG9jVW5zYWZlKDgpXHJcbiAgcmVzcG9uc2Uud3JpdGVJbnQzMkJFKDgsIDApXHJcbiAgcmVzcG9uc2Uud3JpdGVJbnQzMkJFKDgwODc3MTAzLCA0KVxyXG4gIHJldHVybiByZXNwb25zZVxyXG59XHJcblxyXG5jb25zdCBwYXNzd29yZCA9IChwYXNzd29yZDogc3RyaW5nKTogQnVmZmVyID0+IHtcclxuICByZXR1cm4gd3JpdGVyLmFkZENTdHJpbmcocGFzc3dvcmQpLmZsdXNoKGNvZGUuc3RhcnR1cClcclxufVxyXG5cclxuY29uc3Qgc2VuZFNBU0xJbml0aWFsUmVzcG9uc2VNZXNzYWdlID0gZnVuY3Rpb24gKG1lY2hhbmlzbTogc3RyaW5nLCBpbml0aWFsUmVzcG9uc2U6IHN0cmluZyk6IEJ1ZmZlciB7XHJcbiAgLy8gMHg3MCA9ICdwJ1xyXG4gIHdyaXRlci5hZGRDU3RyaW5nKG1lY2hhbmlzbSkuYWRkSW50MzIoQnVmZmVyLmJ5dGVMZW5ndGgoaW5pdGlhbFJlc3BvbnNlKSkuYWRkU3RyaW5nKGluaXRpYWxSZXNwb25zZSlcclxuXHJcbiAgcmV0dXJuIHdyaXRlci5mbHVzaChjb2RlLnN0YXJ0dXApXHJcbn1cclxuXHJcbmNvbnN0IHNlbmRTQ1JBTUNsaWVudEZpbmFsTWVzc2FnZSA9IGZ1bmN0aW9uIChhZGRpdGlvbmFsRGF0YTogc3RyaW5nKTogQnVmZmVyIHtcclxuICByZXR1cm4gd3JpdGVyLmFkZFN0cmluZyhhZGRpdGlvbmFsRGF0YSkuZmx1c2goY29kZS5zdGFydHVwKVxyXG59XHJcblxyXG5jb25zdCBxdWVyeSA9ICh0ZXh0OiBzdHJpbmcpOiBCdWZmZXIgPT4ge1xyXG4gIHJldHVybiB3cml0ZXIuYWRkQ1N0cmluZyh0ZXh0KS5mbHVzaChjb2RlLnF1ZXJ5KVxyXG59XHJcblxyXG50eXBlIFBhcnNlT3B0cyA9IHtcclxuICBuYW1lPzogc3RyaW5nXHJcbiAgdHlwZXM/OiBudW1iZXJbXVxyXG4gIHRleHQ6IHN0cmluZ1xyXG59XHJcblxyXG5jb25zdCBlbXB0eUFycmF5OiBhbnlbXSA9IFtdXHJcblxyXG5jb25zdCBwYXJzZSA9IChxdWVyeTogUGFyc2VPcHRzKTogQnVmZmVyID0+IHtcclxuICAvLyBleHBlY3Qgc29tZXRoaW5nIGxpa2UgdGhpczpcclxuICAvLyB7IG5hbWU6ICdxdWVyeU5hbWUnLFxyXG4gIC8vICAgdGV4dDogJ3NlbGVjdCAqIGZyb20gYmxhaCcsXHJcbiAgLy8gICB0eXBlczogWydpbnQ4JywgJ2Jvb2wnXSB9XHJcblxyXG4gIC8vIG5vcm1hbGl6ZSBtaXNzaW5nIHF1ZXJ5IG5hbWVzIHRvIGFsbG93IGZvciBudWxsXHJcbiAgY29uc3QgbmFtZSA9IHF1ZXJ5Lm5hbWUgfHwgJydcclxuICBpZiAobmFtZS5sZW5ndGggPiA2Mykge1xyXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xyXG4gICAgY29uc29sZS5lcnJvcignV2FybmluZyEgUG9zdGdyZXMgb25seSBzdXBwb3J0cyA2MyBjaGFyYWN0ZXJzIGZvciBxdWVyeSBuYW1lcy4nKVxyXG4gICAgY29uc29sZS5lcnJvcignWW91IHN1cHBsaWVkICVzICglcyknLCBuYW1lLCBuYW1lLmxlbmd0aClcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1RoaXMgY2FuIGNhdXNlIGNvbmZsaWN0cyBhbmQgc2lsZW50IGVycm9ycyBleGVjdXRpbmcgcXVlcmllcycpXHJcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cclxuICB9XHJcblxyXG4gIGNvbnN0IHR5cGVzID0gcXVlcnkudHlwZXMgfHwgZW1wdHlBcnJheVxyXG5cclxuICB2YXIgbGVuID0gdHlwZXMubGVuZ3RoXHJcblxyXG4gIHZhciBidWZmZXIgPSB3cml0ZXJcclxuICAgIC5hZGRDU3RyaW5nKG5hbWUpIC8vIG5hbWUgb2YgcXVlcnlcclxuICAgIC5hZGRDU3RyaW5nKHF1ZXJ5LnRleHQpIC8vIGFjdHVhbCBxdWVyeSB0ZXh0XHJcbiAgICAuYWRkSW50MTYobGVuKVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICBidWZmZXIuYWRkSW50MzIodHlwZXNbaV0pXHJcbiAgfVxyXG5cclxuICByZXR1cm4gd3JpdGVyLmZsdXNoKGNvZGUucGFyc2UpXHJcbn1cclxuXHJcbnR5cGUgVmFsdWVNYXBwZXIgPSAocGFyYW06IGFueSwgaW5kZXg6IG51bWJlcikgPT4gYW55XHJcblxyXG50eXBlIEJpbmRPcHRzID0ge1xyXG4gIHBvcnRhbD86IHN0cmluZ1xyXG4gIGJpbmFyeT86IGJvb2xlYW5cclxuICBzdGF0ZW1lbnQ/OiBzdHJpbmdcclxuICB2YWx1ZXM/OiBhbnlbXVxyXG4gIC8vIG9wdGlvbmFsIG1hcCBmcm9tIEpTIHZhbHVlIHRvIHBvc3RncmVzIHZhbHVlIHBlciBwYXJhbWV0ZXJcclxuICB2YWx1ZU1hcHBlcj86IFZhbHVlTWFwcGVyXHJcbn1cclxuXHJcbmNvbnN0IHBhcmFtV3JpdGVyID0gbmV3IFdyaXRlcigpXHJcblxyXG4vLyBtYWtlIHRoaXMgYSBjb25zdCBlbnVtIHNvIHR5cGVzY3JpcHQgd2lsbCBpbmxpbmUgdGhlIHZhbHVlXHJcbmNvbnN0IGVudW0gUGFyYW1UeXBlIHtcclxuICBTVFJJTkcgPSAwLFxyXG4gIEJJTkFSWSA9IDEsXHJcbn1cclxuXHJcbmNvbnN0IHdyaXRlVmFsdWVzID0gZnVuY3Rpb24gKHZhbHVlczogYW55W10sIHZhbHVlTWFwcGVyPzogVmFsdWVNYXBwZXIpOiB2b2lkIHtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgbWFwcGVkVmFsID0gdmFsdWVNYXBwZXIgPyB2YWx1ZU1hcHBlcih2YWx1ZXNbaV0sIGkpIDogdmFsdWVzW2ldXHJcbiAgICBpZiAobWFwcGVkVmFsID09IG51bGwpIHtcclxuICAgICAgLy8gYWRkIHRoZSBwYXJhbSB0eXBlIChzdHJpbmcpIHRvIHRoZSB3cml0ZXJcclxuICAgICAgd3JpdGVyLmFkZEludDE2KFBhcmFtVHlwZS5TVFJJTkcpXHJcbiAgICAgIC8vIHdyaXRlIC0xIHRvIHRoZSBwYXJhbSB3cml0ZXIgdG8gaW5kaWNhdGUgbnVsbFxyXG4gICAgICBwYXJhbVdyaXRlci5hZGRJbnQzMigtMSlcclxuICAgIH0gZWxzZSBpZiAobWFwcGVkVmFsIGluc3RhbmNlb2YgQnVmZmVyKSB7XHJcbiAgICAgIC8vIGFkZCB0aGUgcGFyYW0gdHlwZSAoYmluYXJ5KSB0byB0aGUgd3JpdGVyXHJcbiAgICAgIHdyaXRlci5hZGRJbnQxNihQYXJhbVR5cGUuQklOQVJZKVxyXG4gICAgICAvLyBhZGQgdGhlIGJ1ZmZlciB0byB0aGUgcGFyYW0gd3JpdGVyXHJcbiAgICAgIHBhcmFtV3JpdGVyLmFkZEludDMyKG1hcHBlZFZhbC5sZW5ndGgpXHJcbiAgICAgIHBhcmFtV3JpdGVyLmFkZChtYXBwZWRWYWwpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBhZGQgdGhlIHBhcmFtIHR5cGUgKHN0cmluZykgdG8gdGhlIHdyaXRlclxyXG4gICAgICB3cml0ZXIuYWRkSW50MTYoUGFyYW1UeXBlLlNUUklORylcclxuICAgICAgcGFyYW1Xcml0ZXIuYWRkSW50MzIoQnVmZmVyLmJ5dGVMZW5ndGgobWFwcGVkVmFsKSlcclxuICAgICAgcGFyYW1Xcml0ZXIuYWRkU3RyaW5nKG1hcHBlZFZhbClcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IGJpbmQgPSAoY29uZmlnOiBCaW5kT3B0cyA9IHt9KTogQnVmZmVyID0+IHtcclxuICAvLyBub3JtYWxpemUgY29uZmlnXHJcbiAgY29uc3QgcG9ydGFsID0gY29uZmlnLnBvcnRhbCB8fCAnJ1xyXG4gIGNvbnN0IHN0YXRlbWVudCA9IGNvbmZpZy5zdGF0ZW1lbnQgfHwgJydcclxuICBjb25zdCBiaW5hcnkgPSBjb25maWcuYmluYXJ5IHx8IGZhbHNlXHJcbiAgY29uc3QgdmFsdWVzID0gY29uZmlnLnZhbHVlcyB8fCBlbXB0eUFycmF5XHJcbiAgY29uc3QgbGVuID0gdmFsdWVzLmxlbmd0aFxyXG5cclxuICB3cml0ZXIuYWRkQ1N0cmluZyhwb3J0YWwpLmFkZENTdHJpbmcoc3RhdGVtZW50KVxyXG4gIHdyaXRlci5hZGRJbnQxNihsZW4pXHJcblxyXG4gIHdyaXRlVmFsdWVzKHZhbHVlcywgY29uZmlnLnZhbHVlTWFwcGVyKVxyXG5cclxuICB3cml0ZXIuYWRkSW50MTYobGVuKVxyXG4gIHdyaXRlci5hZGQocGFyYW1Xcml0ZXIuZmx1c2goKSlcclxuXHJcbiAgLy8gZm9ybWF0IGNvZGVcclxuICB3cml0ZXIuYWRkSW50MTYoYmluYXJ5ID8gUGFyYW1UeXBlLkJJTkFSWSA6IFBhcmFtVHlwZS5TVFJJTkcpXHJcbiAgcmV0dXJuIHdyaXRlci5mbHVzaChjb2RlLmJpbmQpXHJcbn1cclxuXHJcbnR5cGUgRXhlY09wdHMgPSB7XHJcbiAgcG9ydGFsPzogc3RyaW5nXHJcbiAgcm93cz86IG51bWJlclxyXG59XHJcblxyXG5jb25zdCBlbXB0eUV4ZWN1dGUgPSBCdWZmZXIuZnJvbShbY29kZS5leGVjdXRlLCAweDAwLCAweDAwLCAweDAwLCAweDA5LCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwXSlcclxuXHJcbmNvbnN0IGV4ZWN1dGUgPSAoY29uZmlnPzogRXhlY09wdHMpOiBCdWZmZXIgPT4ge1xyXG4gIC8vIHRoaXMgaXMgdGhlIGhhcHB5IHBhdGggZm9yIG1vc3QgcXVlcmllc1xyXG4gIGlmICghY29uZmlnIHx8ICghY29uZmlnLnBvcnRhbCAmJiAhY29uZmlnLnJvd3MpKSB7XHJcbiAgICByZXR1cm4gZW1wdHlFeGVjdXRlXHJcbiAgfVxyXG5cclxuICBjb25zdCBwb3J0YWwgPSBjb25maWcucG9ydGFsIHx8ICcnXHJcbiAgY29uc3Qgcm93cyA9IGNvbmZpZy5yb3dzIHx8IDBcclxuXHJcbiAgY29uc3QgcG9ydGFsTGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgocG9ydGFsKVxyXG4gIGNvbnN0IGxlbiA9IDQgKyBwb3J0YWxMZW5ndGggKyAxICsgNFxyXG4gIC8vIG9uZSBleHRyYSBiaXQgZm9yIGNvZGVcclxuICBjb25zdCBidWZmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDEgKyBsZW4pXHJcbiAgYnVmZlswXSA9IGNvZGUuZXhlY3V0ZVxyXG4gIGJ1ZmYud3JpdGVJbnQzMkJFKGxlbiwgMSlcclxuICBidWZmLndyaXRlKHBvcnRhbCwgNSwgJ3V0Zi04JylcclxuICBidWZmW3BvcnRhbExlbmd0aCArIDVdID0gMCAvLyBudWxsIHRlcm1pbmF0ZSBwb3J0YWwgY1N0cmluZ1xyXG4gIGJ1ZmYud3JpdGVVSW50MzJCRShyb3dzLCBidWZmLmxlbmd0aCAtIDQpXHJcbiAgcmV0dXJuIGJ1ZmZcclxufVxyXG5cclxuY29uc3QgY2FuY2VsID0gKHByb2Nlc3NJRDogbnVtYmVyLCBzZWNyZXRLZXk6IG51bWJlcik6IEJ1ZmZlciA9PiB7XHJcbiAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKDE2KVxyXG4gIGJ1ZmZlci53cml0ZUludDMyQkUoMTYsIDApXHJcbiAgYnVmZmVyLndyaXRlSW50MTZCRSgxMjM0LCA0KVxyXG4gIGJ1ZmZlci53cml0ZUludDE2QkUoNTY3OCwgNilcclxuICBidWZmZXIud3JpdGVJbnQzMkJFKHByb2Nlc3NJRCwgOClcclxuICBidWZmZXIud3JpdGVJbnQzMkJFKHNlY3JldEtleSwgMTIpXHJcbiAgcmV0dXJuIGJ1ZmZlclxyXG59XHJcblxyXG50eXBlIFBvcnRhbE9wdHMgPSB7XHJcbiAgdHlwZTogJ1MnIHwgJ1AnXHJcbiAgbmFtZT86IHN0cmluZ1xyXG59XHJcblxyXG5jb25zdCBjc3RyaW5nTWVzc2FnZSA9IChjb2RlOiBjb2RlLCBzdHJpbmc6IHN0cmluZyk6IEJ1ZmZlciA9PiB7XHJcbiAgY29uc3Qgc3RyaW5nTGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3RyaW5nKVxyXG4gIGNvbnN0IGxlbiA9IDQgKyBzdHJpbmdMZW4gKyAxXHJcbiAgLy8gb25lIGV4dHJhIGJpdCBmb3IgY29kZVxyXG4gIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgxICsgbGVuKVxyXG4gIGJ1ZmZlclswXSA9IGNvZGVcclxuICBidWZmZXIud3JpdGVJbnQzMkJFKGxlbiwgMSlcclxuICBidWZmZXIud3JpdGUoc3RyaW5nLCA1LCAndXRmLTgnKVxyXG4gIGJ1ZmZlcltsZW5dID0gMCAvLyBudWxsIHRlcm1pbmF0ZSBjU3RyaW5nXHJcbiAgcmV0dXJuIGJ1ZmZlclxyXG59XHJcblxyXG5jb25zdCBlbXB0eURlc2NyaWJlUG9ydGFsID0gd3JpdGVyLmFkZENTdHJpbmcoJ1AnKS5mbHVzaChjb2RlLmRlc2NyaWJlKVxyXG5jb25zdCBlbXB0eURlc2NyaWJlU3RhdGVtZW50ID0gd3JpdGVyLmFkZENTdHJpbmcoJ1MnKS5mbHVzaChjb2RlLmRlc2NyaWJlKVxyXG5cclxuY29uc3QgZGVzY3JpYmUgPSAobXNnOiBQb3J0YWxPcHRzKTogQnVmZmVyID0+IHtcclxuICByZXR1cm4gbXNnLm5hbWVcclxuICAgID8gY3N0cmluZ01lc3NhZ2UoY29kZS5kZXNjcmliZSwgYCR7bXNnLnR5cGV9JHttc2cubmFtZSB8fCAnJ31gKVxyXG4gICAgOiBtc2cudHlwZSA9PT0gJ1AnXHJcbiAgICA/IGVtcHR5RGVzY3JpYmVQb3J0YWxcclxuICAgIDogZW1wdHlEZXNjcmliZVN0YXRlbWVudFxyXG59XHJcblxyXG5jb25zdCBjbG9zZSA9IChtc2c6IFBvcnRhbE9wdHMpOiBCdWZmZXIgPT4ge1xyXG4gIGNvbnN0IHRleHQgPSBgJHttc2cudHlwZX0ke21zZy5uYW1lIHx8ICcnfWBcclxuICByZXR1cm4gY3N0cmluZ01lc3NhZ2UoY29kZS5jbG9zZSwgdGV4dClcclxufVxyXG5cclxuY29uc3QgY29weURhdGEgPSAoY2h1bms6IEJ1ZmZlcik6IEJ1ZmZlciA9PiB7XHJcbiAgcmV0dXJuIHdyaXRlci5hZGQoY2h1bmspLmZsdXNoKGNvZGUuY29weUZyb21DaHVuaylcclxufVxyXG5cclxuY29uc3QgY29weUZhaWwgPSAobWVzc2FnZTogc3RyaW5nKTogQnVmZmVyID0+IHtcclxuICByZXR1cm4gY3N0cmluZ01lc3NhZ2UoY29kZS5jb3B5RmFpbCwgbWVzc2FnZSlcclxufVxyXG5cclxuY29uc3QgY29kZU9ubHlCdWZmZXIgPSAoY29kZTogY29kZSk6IEJ1ZmZlciA9PiBCdWZmZXIuZnJvbShbY29kZSwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwNF0pXHJcblxyXG5jb25zdCBmbHVzaEJ1ZmZlciA9IGNvZGVPbmx5QnVmZmVyKGNvZGUuZmx1c2gpXHJcbmNvbnN0IHN5bmNCdWZmZXIgPSBjb2RlT25seUJ1ZmZlcihjb2RlLnN5bmMpXHJcbmNvbnN0IGVuZEJ1ZmZlciA9IGNvZGVPbmx5QnVmZmVyKGNvZGUuZW5kKVxyXG5jb25zdCBjb3B5RG9uZUJ1ZmZlciA9IGNvZGVPbmx5QnVmZmVyKGNvZGUuY29weURvbmUpXHJcblxyXG5jb25zdCBzZXJpYWxpemUgPSB7XHJcbiAgc3RhcnR1cCxcclxuICBwYXNzd29yZCxcclxuICByZXF1ZXN0U3NsLFxyXG4gIHNlbmRTQVNMSW5pdGlhbFJlc3BvbnNlTWVzc2FnZSxcclxuICBzZW5kU0NSQU1DbGllbnRGaW5hbE1lc3NhZ2UsXHJcbiAgcXVlcnksXHJcbiAgcGFyc2UsXHJcbiAgYmluZCxcclxuICBleGVjdXRlLFxyXG4gIGRlc2NyaWJlLFxyXG4gIGNsb3NlLFxyXG4gIGZsdXNoOiAoKSA9PiBmbHVzaEJ1ZmZlcixcclxuICBzeW5jOiAoKSA9PiBzeW5jQnVmZmVyLFxyXG4gIGVuZDogKCkgPT4gZW5kQnVmZmVyLFxyXG4gIGNvcHlEYXRhLFxyXG4gIGNvcHlEb25lOiAoKSA9PiBjb3B5RG9uZUJ1ZmZlcixcclxuICBjb3B5RmFpbCxcclxuICBjYW5jZWwsXHJcbn1cclxuXHJcbmV4cG9ydCB7IHNlcmlhbGl6ZSB9XHJcbiJdLCJ2ZXJzaW9uIjozfQ==