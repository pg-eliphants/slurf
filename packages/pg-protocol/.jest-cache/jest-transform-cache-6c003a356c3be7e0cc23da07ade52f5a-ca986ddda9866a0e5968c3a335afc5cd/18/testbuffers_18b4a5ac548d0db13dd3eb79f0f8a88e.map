{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\testing\\test-buffers.ts","mappings":";;;;;AAAA,wEAAwE;AACxE,gEAAuC;AAEvC,MAAM,OAAO,GAAG;IACZ,aAAa,EAAE;QACX,OAAO,IAAI,qBAAU,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAClE,CAAC;IAED,gBAAgB,EAAE;QACd,OAAO,IAAI,qBAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACxD,CAAC;IAED,+BAA+B,EAAE;QAC7B,OAAO,IAAI,qBAAU,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACxD,CAAC;IAED,yBAAyB,EAAE;QACvB,OAAO,IAAI,qBAAU,EAAE;aAClB,QAAQ,CAAC,CAAC,CAAC;aACX,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAC9B,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzB,CAAC;IAED,kBAAkB,EAAE;QAChB,OAAO,IAAI,qBAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpG,CAAC;IAED,0BAA0B,EAAE;QACxB,OAAO,IAAI,qBAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC3E,CAAC;IAED,uBAAuB,EAAE;QACrB,OAAO,IAAI,qBAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC3E,CAAC;IAED,eAAe,EAAE,UAAU,IAAY,EAAE,KAAa;QAClD,OAAO,IAAI,qBAAU,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/E,CAAC;IAED,cAAc,EAAE,UAAU,SAAiB,EAAE,SAAiB;QAC1D,OAAO,IAAI,qBAAU,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpF,CAAC;IAED,eAAe,EAAE,UAAU,MAAc;QACrC,OAAO,IAAI,qBAAU,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/D,CAAC;IAED,cAAc,EAAE,UAAU,MAAa;QACnC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;QACtB,IAAI,GAAG,GAAG,IAAI,qBAAU,EAAE,CAAC;QAC3B,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC5B,MAAM,CAAC,OAAO,CAAC,UAAU,KAAK;YAC1B,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;iBACrB,QAAQ,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC;iBAC5B,QAAQ,CAAC,KAAK,CAAC,eAAe,IAAI,CAAC,CAAC;iBACpC,QAAQ,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,CAAC;iBAC/B,QAAQ,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,CAAC;iBACjC,QAAQ,CAAC,KAAK,CAAC,YAAY,IAAI,CAAC,CAAC;iBACjC,QAAQ,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,oBAAoB,EAAE,UAAU,WAAqB;QACjD,WAAW,GAAG,WAAW,IAAI,EAAE,CAAC;QAChC,IAAI,GAAG,GAAG,IAAI,qBAAU,EAAE,CAAC;QAC3B,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACjC,WAAW,CAAC,OAAO,CAAC,UAAU,UAAU;YACpC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,OAAO,EAAE,UAAU,OAAc;QAC7B,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;QACxB,IAAI,GAAG,GAAG,IAAI,qBAAU,EAAE,CAAC;QAC3B,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,OAAO,CAAC,OAAO,CAAC,UAAU,GAAG;YACzB,IAAI,GAAG,IAAI,IAAI,EAAE;gBACb,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;aACpB;iBAAM;gBACH,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;gBACtC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC5B,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED,KAAK,EAAE,UAAU,MAAW;QACxB,OAAO,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;IAED,MAAM,EAAE,UAAU,MAAW;QACzB,OAAO,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;IAED,aAAa,EAAE,UAAU,MAAW;QAChC,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;QACtB,IAAI,GAAG,GAAG,IAAI,qBAAU,EAAE,CAAC;QAC3B,MAAM,CAAC,OAAO,CAAC,UAAU,KAAU;YAC/B,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACxB,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa;IACnD,CAAC;IAED,aAAa,EAAE;QACX,OAAO,IAAI,qBAAU,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,YAAY,EAAE;QACV,OAAO,IAAI,qBAAU,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,YAAY,EAAE,UAAU,EAAU,EAAE,OAAe,EAAE,OAAe;QAChE,OAAO,IAAI,qBAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACjG,CAAC;IAED,UAAU,EAAE;QACR,OAAO,IAAI,qBAAU,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,eAAe,EAAE;QACb,OAAO,IAAI,qBAAU,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,aAAa,EAAE;QACX,OAAO,IAAI,qBAAU,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,EAAE,UAAU,IAAY;QAC1B,MAAM,IAAI,GAAG,IAAI,qBAAU,EAAE;YACzB,YAAY;aACX,OAAO,CAAC,CAAC,CAAC;YACX,eAAe;aACd,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACpB;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,EAAE,UAAU,IAAY;QAC3B,MAAM,IAAI,GAAG,IAAI,qBAAU,EAAE;YACzB,YAAY;aACX,OAAO,CAAC,CAAC,CAAC;YACX,eAAe;aACd,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACpB;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,QAAQ,EAAE,UAAU,KAAa;QAC7B,OAAO,IAAI,qBAAU,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACvD,CAAC;IAED,QAAQ,EAAE;QACN,OAAO,IAAI,qBAAU,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;CACJ,CAAC;AAEF,kBAAe,OAAO,CAAC","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\testing\\test-buffers.ts"],"sourcesContent":["// https://www.postgresql.org/docs/current/protocol-message-formats.html\nimport BufferList from './buffer-list';\n\nconst buffers = {\n    readyForQuery: function () {\n        return new BufferList().add(Buffer.from('I')).join(true, 'Z');\n    },\n\n    authenticationOk: function () {\n        return new BufferList().addInt32(0).join(true, 'R');\n    },\n\n    authenticationCleartextPassword: function () {\n        return new BufferList().addInt32(3).join(true, 'R');\n    },\n\n    authenticationMD5Password: function () {\n        return new BufferList()\n            .addInt32(5)\n            .add(Buffer.from([1, 2, 3, 4]))\n            .join(true, 'R');\n    },\n\n    authenticationSASL: function () {\n        return new BufferList().addInt32(10).addCString('SCRAM-SHA-256').addCString('').join(true, 'R');\n    },\n\n    authenticationSASLContinue: function () {\n        return new BufferList().addInt32(11).addString('data').join(true, 'R');\n    },\n\n    authenticationSASLFinal: function () {\n        return new BufferList().addInt32(12).addString('data').join(true, 'R');\n    },\n\n    parameterStatus: function (name: string, value: string) {\n        return new BufferList().addCString(name).addCString(value).join(true, 'S');\n    },\n\n    backendKeyData: function (processID: number, secretKey: number) {\n        return new BufferList().addInt32(processID).addInt32(secretKey).join(true, 'K');\n    },\n\n    commandComplete: function (string: string) {\n        return new BufferList().addCString(string).join(true, 'C');\n    },\n\n    rowDescription: function (fields: any[]) {\n        fields = fields || [];\n        var buf = new BufferList();\n        buf.addInt16(fields.length);\n        fields.forEach(function (field) {\n            buf.addCString(field.name)\n                .addInt32(field.tableID || 0)\n                .addInt16(field.attributeNumber || 0)\n                .addInt32(field.dataTypeID || 0)\n                .addInt16(field.dataTypeSize || 0)\n                .addInt32(field.typeModifier || 0)\n                .addInt16(field.formatCode || 0);\n        });\n        return buf.join(true, 'T');\n    },\n\n    parameterDescription: function (dataTypeIDs: number[]) {\n        dataTypeIDs = dataTypeIDs || [];\n        var buf = new BufferList();\n        buf.addInt16(dataTypeIDs.length);\n        dataTypeIDs.forEach(function (dataTypeID) {\n            buf.addInt32(dataTypeID);\n        });\n        return buf.join(true, 't');\n    },\n\n    dataRow: function (columns: any[]) {\n        columns = columns || [];\n        var buf = new BufferList();\n        buf.addInt16(columns.length);\n        columns.forEach(function (col) {\n            if (col == null) {\n                buf.addInt32(-1);\n            } else {\n                var strBuf = Buffer.from(col, 'utf8');\n                buf.addInt32(strBuf.length);\n                buf.add(strBuf);\n            }\n        });\n        return buf.join(true, 'D');\n    },\n\n    error: function (fields: any) {\n        return buffers.errorOrNotice(fields).join(true, 'E');\n    },\n\n    notice: function (fields: any) {\n        return buffers.errorOrNotice(fields).join(true, 'N');\n    },\n\n    errorOrNotice: function (fields: any) {\n        fields = fields || [];\n        var buf = new BufferList();\n        fields.forEach(function (field: any) {\n            buf.addChar(field.type);\n            buf.addCString(field.value);\n        });\n        return buf.add(Buffer.from([0])); // terminator\n    },\n\n    parseComplete: function () {\n        return new BufferList().join(true, '1');\n    },\n\n    bindComplete: function () {\n        return new BufferList().join(true, '2');\n    },\n\n    notification: function (id: number, channel: string, payload: string) {\n        return new BufferList().addInt32(id).addCString(channel).addCString(payload).join(true, 'A');\n    },\n\n    emptyQuery: function () {\n        return new BufferList().join(true, 'I');\n    },\n\n    portalSuspended: function () {\n        return new BufferList().join(true, 's');\n    },\n\n    closeComplete: function () {\n        return new BufferList().join(true, '3');\n    },\n\n    copyIn: function (cols: number) {\n        const list = new BufferList()\n            // text mode\n            .addByte(0)\n            // column count\n            .addInt16(cols);\n        for (let i = 0; i < cols; i++) {\n            list.addInt16(i);\n        }\n        return list.join(true, 'G');\n    },\n\n    copyOut: function (cols: number) {\n        const list = new BufferList()\n            // text mode\n            .addByte(0)\n            // column count\n            .addInt16(cols);\n        for (let i = 0; i < cols; i++) {\n            list.addInt16(i);\n        }\n        return list.join(true, 'H');\n    },\n\n    copyData: function (bytes: Buffer) {\n        return new BufferList().add(bytes).join(true, 'd');\n    },\n\n    copyDone: function () {\n        return new BufferList().join(true, 'c');\n    }\n};\n\nexport default buffers;\n"],"version":3}