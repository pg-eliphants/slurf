{"version":3,"names":["cov_2rigs5yc3w","actualCoverage","s","buffer_writer_1","require","code","f","b","writer","Writer","startup","opts","addInt16","key","Object","keys","addCString","bodyBuffer","flush","length","addInt32","add","requestSsl","response","Buffer","allocUnsafe","writeInt32BE","password","sendSASLInitialResponseMessage","mechanism","initialResponse","byteLength","addString","sendSCRAMClientFinalMessage","additionalData","query","text","emptyArray","parse","name","console","error","types","len","buffer","i","paramWriter","ParamType","writeValues","values","valueMapper","mappedVal","bind","config","portal","statement","binary","emptyExecute","from","execute","rows","portalLength","buff","write","writeUInt32BE","cancel","processID","secretKey","writeInt16BE","cstringMessage","string","stringLen","emptyDescribePortal","emptyDescribeStatement","describe","msg","type","close","copyData","chunk","copyFail","message","codeOnlyBuffer","flushBuffer","syncBuffer","endBuffer","copyDoneBuffer","serialize","sync","end","copyDone","exports"],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\serializer.ts"],"sourcesContent":["import { Writer } from './buffer-writer'\r\n\r\nconst enum code {\r\n  startup = 0x70,\r\n  query = 0x51,\r\n  parse = 0x50,\r\n  bind = 0x42,\r\n  execute = 0x45,\r\n  flush = 0x48,\r\n  sync = 0x53,\r\n  end = 0x58,\r\n  close = 0x43,\r\n  describe = 0x44,\r\n  copyFromChunk = 0x64,\r\n  copyDone = 0x63,\r\n  copyFail = 0x66,\r\n}\r\n\r\nconst writer = new Writer()\r\n\r\nconst startup = (opts: Record<string, string>): Buffer => {\r\n  // protocol version\r\n  writer.addInt16(3).addInt16(0)\r\n  for (const key of Object.keys(opts)) {\r\n    writer.addCString(key).addCString(opts[key])\r\n  }\r\n\r\n  writer.addCString('client_encoding').addCString('UTF8')\r\n\r\n  var bodyBuffer = writer.addCString('').flush()\r\n  // this message is sent without a code\r\n\r\n  var length = bodyBuffer.length + 4\r\n\r\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\r\n}\r\n\r\nconst requestSsl = (): Buffer => {\r\n  const response = Buffer.allocUnsafe(8)\r\n  response.writeInt32BE(8, 0)\r\n  response.writeInt32BE(80877103, 4)\r\n  return response\r\n}\r\n\r\nconst password = (password: string): Buffer => {\r\n  return writer.addCString(password).flush(code.startup)\r\n}\r\n\r\nconst sendSASLInitialResponseMessage = function (mechanism: string, initialResponse: string): Buffer {\r\n  // 0x70 = 'p'\r\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse)\r\n\r\n  return writer.flush(code.startup)\r\n}\r\n\r\nconst sendSCRAMClientFinalMessage = function (additionalData: string): Buffer {\r\n  return writer.addString(additionalData).flush(code.startup)\r\n}\r\n\r\nconst query = (text: string): Buffer => {\r\n  return writer.addCString(text).flush(code.query)\r\n}\r\n\r\ntype ParseOpts = {\r\n  name?: string\r\n  types?: number[]\r\n  text: string\r\n}\r\n\r\nconst emptyArray: any[] = []\r\n\r\nconst parse = (query: ParseOpts): Buffer => {\r\n  // expect something like this:\r\n  // { name: 'queryName',\r\n  //   text: 'select * from blah',\r\n  //   types: ['int8', 'bool'] }\r\n\r\n  // normalize missing query names to allow for null\r\n  const name = query.name || ''\r\n  if (name.length > 63) {\r\n    /* eslint-disable no-console */\r\n    console.error('Warning! Postgres only supports 63 characters for query names.')\r\n    console.error('You supplied %s (%s)', name, name.length)\r\n    console.error('This can cause conflicts and silent errors executing queries')\r\n    /* eslint-enable no-console */\r\n  }\r\n\r\n  const types = query.types || emptyArray\r\n\r\n  var len = types.length\r\n\r\n  var buffer = writer\r\n    .addCString(name) // name of query\r\n    .addCString(query.text) // actual query text\r\n    .addInt16(len)\r\n\r\n  for (var i = 0; i < len; i++) {\r\n    buffer.addInt32(types[i])\r\n  }\r\n\r\n  return writer.flush(code.parse)\r\n}\r\n\r\ntype ValueMapper = (param: any, index: number) => any\r\n\r\ntype BindOpts = {\r\n  portal?: string\r\n  binary?: boolean\r\n  statement?: string\r\n  values?: any[]\r\n  // optional map from JS value to postgres value per parameter\r\n  valueMapper?: ValueMapper\r\n}\r\n\r\nconst paramWriter = new Writer()\r\n\r\n// make this a const enum so typescript will inline the value\r\nconst enum ParamType {\r\n  STRING = 0,\r\n  BINARY = 1,\r\n}\r\n\r\nconst writeValues = function (values: any[], valueMapper?: ValueMapper): void {\r\n  for (let i = 0; i < values.length; i++) {\r\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\r\n    if (mappedVal == null) {\r\n      // add the param type (string) to the writer\r\n      writer.addInt16(ParamType.STRING)\r\n      // write -1 to the param writer to indicate null\r\n      paramWriter.addInt32(-1)\r\n    } else if (mappedVal instanceof Buffer) {\r\n      // add the param type (binary) to the writer\r\n      writer.addInt16(ParamType.BINARY)\r\n      // add the buffer to the param writer\r\n      paramWriter.addInt32(mappedVal.length)\r\n      paramWriter.add(mappedVal)\r\n    } else {\r\n      // add the param type (string) to the writer\r\n      writer.addInt16(ParamType.STRING)\r\n      paramWriter.addInt32(Buffer.byteLength(mappedVal))\r\n      paramWriter.addString(mappedVal)\r\n    }\r\n  }\r\n}\r\n\r\nconst bind = (config: BindOpts = {}): Buffer => {\r\n  // normalize config\r\n  const portal = config.portal || ''\r\n  const statement = config.statement || ''\r\n  const binary = config.binary || false\r\n  const values = config.values || emptyArray\r\n  const len = values.length\r\n\r\n  writer.addCString(portal).addCString(statement)\r\n  writer.addInt16(len)\r\n\r\n  writeValues(values, config.valueMapper)\r\n\r\n  writer.addInt16(len)\r\n  writer.add(paramWriter.flush())\r\n\r\n  // format code\r\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\r\n  return writer.flush(code.bind)\r\n}\r\n\r\ntype ExecOpts = {\r\n  portal?: string\r\n  rows?: number\r\n}\r\n\r\nconst emptyExecute = Buffer.from([code.execute, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00])\r\n\r\nconst execute = (config?: ExecOpts): Buffer => {\r\n  // this is the happy path for most queries\r\n  if (!config || (!config.portal && !config.rows)) {\r\n    return emptyExecute\r\n  }\r\n\r\n  const portal = config.portal || ''\r\n  const rows = config.rows || 0\r\n\r\n  const portalLength = Buffer.byteLength(portal)\r\n  const len = 4 + portalLength + 1 + 4\r\n  // one extra bit for code\r\n  const buff = Buffer.allocUnsafe(1 + len)\r\n  buff[0] = code.execute\r\n  buff.writeInt32BE(len, 1)\r\n  buff.write(portal, 5, 'utf-8')\r\n  buff[portalLength + 5] = 0 // null terminate portal cString\r\n  buff.writeUInt32BE(rows, buff.length - 4)\r\n  return buff\r\n}\r\n\r\nconst cancel = (processID: number, secretKey: number): Buffer => {\r\n  const buffer = Buffer.allocUnsafe(16)\r\n  buffer.writeInt32BE(16, 0)\r\n  buffer.writeInt16BE(1234, 4)\r\n  buffer.writeInt16BE(5678, 6)\r\n  buffer.writeInt32BE(processID, 8)\r\n  buffer.writeInt32BE(secretKey, 12)\r\n  return buffer\r\n}\r\n\r\ntype PortalOpts = {\r\n  type: 'S' | 'P'\r\n  name?: string\r\n}\r\n\r\nconst cstringMessage = (code: code, string: string): Buffer => {\r\n  const stringLen = Buffer.byteLength(string)\r\n  const len = 4 + stringLen + 1\r\n  // one extra bit for code\r\n  const buffer = Buffer.allocUnsafe(1 + len)\r\n  buffer[0] = code\r\n  buffer.writeInt32BE(len, 1)\r\n  buffer.write(string, 5, 'utf-8')\r\n  buffer[len] = 0 // null terminate cString\r\n  return buffer\r\n}\r\n\r\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\r\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\r\n\r\nconst describe = (msg: PortalOpts): Buffer => {\r\n  return msg.name\r\n    ? cstringMessage(code.describe, `${msg.type}${msg.name || ''}`)\r\n    : msg.type === 'P'\r\n    ? emptyDescribePortal\r\n    : emptyDescribeStatement\r\n}\r\n\r\nconst close = (msg: PortalOpts): Buffer => {\r\n  const text = `${msg.type}${msg.name || ''}`\r\n  return cstringMessage(code.close, text)\r\n}\r\n\r\nconst copyData = (chunk: Buffer): Buffer => {\r\n  return writer.add(chunk).flush(code.copyFromChunk)\r\n}\r\n\r\nconst copyFail = (message: string): Buffer => {\r\n  return cstringMessage(code.copyFail, message)\r\n}\r\n\r\nconst codeOnlyBuffer = (code: code): Buffer => Buffer.from([code, 0x00, 0x00, 0x00, 0x04])\r\n\r\nconst flushBuffer = codeOnlyBuffer(code.flush)\r\nconst syncBuffer = codeOnlyBuffer(code.sync)\r\nconst endBuffer = codeOnlyBuffer(code.end)\r\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\r\n\r\nconst serialize = {\r\n  startup,\r\n  password,\r\n  requestSsl,\r\n  sendSASLInitialResponseMessage,\r\n  sendSCRAMClientFinalMessage,\r\n  query,\r\n  parse,\r\n  bind,\r\n  execute,\r\n  describe,\r\n  close,\r\n  flush: () => flushBuffer,\r\n  sync: () => syncBuffer,\r\n  end: () => endBuffer,\r\n  copyData,\r\n  copyDone: () => copyDoneBuffer,\r\n  copyFail,\r\n  cancel,\r\n}\r\n\r\nexport { serialize }\r\n"],"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"}