{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\serializer.ts","mappings":"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","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\serializer.ts"],"sourcesContent":["import { Writer } from './buffer-writer';\n\nconst enum code {\n    startup = 0x70,\n    query = 0x51,\n    parse = 0x50,\n    bind = 0x42,\n    execute = 0x45,\n    flush = 0x48,\n    sync = 0x53,\n    end = 0x58,\n    close = 0x43,\n    describe = 0x44,\n    copyFromChunk = 0x64,\n    copyDone = 0x63,\n    copyFail = 0x66\n}\n\nconst writer = new Writer();\n\nconst startup = (opts: Record<string, string>): Buffer => {\n    // protocol version\n    writer.addInt16(3).addInt16(0);\n    for (const key of Object.keys(opts)) {\n        writer.addCString(key).addCString(opts[key]);\n    }\n\n    writer.addCString('client_encoding').addCString('UTF8');\n\n    var bodyBuffer = writer.addCString('').flush();\n    // this message is sent without a code\n\n    var length = bodyBuffer.length + 4;\n\n    return new Writer().addInt32(length).add(bodyBuffer).flush();\n};\n\nconst requestSsl = (): Buffer => {\n    const response = Buffer.allocUnsafe(8);\n    response.writeInt32BE(8, 0);\n    response.writeInt32BE(80877103, 4);\n    return response;\n};\n\nconst password = (password: string): Buffer => {\n    return writer.addCString(password).flush(code.startup);\n};\n\nconst sendSASLInitialResponseMessage = function (mechanism: string, initialResponse: string): Buffer {\n    // 0x70 = 'p'\n    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n\n    return writer.flush(code.startup);\n};\n\nconst sendSCRAMClientFinalMessage = function (additionalData: string): Buffer {\n    return writer.addString(additionalData).flush(code.startup);\n};\n\nconst query = (text: string): Buffer => {\n    return writer.addCString(text).flush(code.query);\n};\n\ntype ParseOpts = {\n    name?: string;\n    types?: number[];\n    text: string;\n};\n\nconst emptyArray: any[] = [];\n\nconst parse = (query: ParseOpts): Buffer => {\n    // expect something like this:\n    // { name: 'queryName',\n    //   text: 'select * from blah',\n    //   types: ['int8', 'bool'] }\n\n    // normalize missing query names to allow for null\n    const name = query.name || '';\n    if (name.length > 63) {\n        /* eslint-disable no-console */\n        console.error('Warning! Postgres only supports 63 characters for query names.');\n        console.error('You supplied %s (%s)', name, name.length);\n        console.error('This can cause conflicts and silent errors executing queries');\n        /* eslint-enable no-console */\n    }\n\n    const types = query.types || emptyArray;\n\n    var len = types.length;\n\n    var buffer = writer\n        .addCString(name) // name of query\n        .addCString(query.text) // actual query text\n        .addInt16(len);\n\n    for (var i = 0; i < len; i++) {\n        buffer.addInt32(types[i]);\n    }\n\n    return writer.flush(code.parse);\n};\n\ntype ValueMapper = (param: any, index: number) => any;\n\ntype BindOpts = {\n    portal?: string;\n    binary?: boolean;\n    statement?: string;\n    values?: any[];\n    // optional map from JS value to postgres value per parameter\n    valueMapper?: ValueMapper;\n};\n\nconst paramWriter = new Writer();\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n    STRING = 0,\n    BINARY = 1\n}\n\nconst writeValues = function (values: any[], valueMapper?: ValueMapper): void {\n    for (let i = 0; i < values.length; i++) {\n        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n        if (mappedVal == null) {\n            // add the param type (string) to the writer\n            writer.addInt16(ParamType.STRING);\n            // write -1 to the param writer to indicate null\n            paramWriter.addInt32(-1);\n        } else if (mappedVal instanceof Buffer) {\n            // add the param type (binary) to the writer\n            writer.addInt16(ParamType.BINARY);\n            // add the buffer to the param writer\n            paramWriter.addInt32(mappedVal.length);\n            paramWriter.add(mappedVal);\n        } else {\n            // add the param type (string) to the writer\n            writer.addInt16(ParamType.STRING);\n            paramWriter.addInt32(Buffer.byteLength(mappedVal));\n            paramWriter.addString(mappedVal);\n        }\n    }\n};\n\nconst bind = (config: BindOpts = {}): Buffer => {\n    // normalize config\n    const portal = config.portal || '';\n    const statement = config.statement || '';\n    const binary = config.binary || false;\n    const values = config.values || emptyArray;\n    const len = values.length;\n\n    writer.addCString(portal).addCString(statement);\n    writer.addInt16(len);\n\n    writeValues(values, config.valueMapper);\n\n    writer.addInt16(len);\n    writer.add(paramWriter.flush());\n\n    // format code\n    writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING);\n    return writer.flush(code.bind);\n};\n\ntype ExecOpts = {\n    portal?: string;\n    rows?: number;\n};\n\nconst emptyExecute = Buffer.from([code.execute, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\n\nconst execute = (config?: ExecOpts): Buffer => {\n    // this is the happy path for most queries\n    if (!config || (!config.portal && !config.rows)) {\n        return emptyExecute;\n    }\n\n    const portal = config.portal || '';\n    const rows = config.rows || 0;\n\n    const portalLength = Buffer.byteLength(portal);\n    const len = 4 + portalLength + 1 + 4;\n    // one extra bit for code\n    const buff = Buffer.allocUnsafe(1 + len);\n    buff[0] = code.execute;\n    buff.writeInt32BE(len, 1);\n    buff.write(portal, 5, 'utf-8');\n    buff[portalLength + 5] = 0; // null terminate portal cString\n    buff.writeUInt32BE(rows, buff.length - 4);\n    return buff;\n};\n\nconst cancel = (processID: number, secretKey: number): Buffer => {\n    const buffer = Buffer.allocUnsafe(16);\n    buffer.writeInt32BE(16, 0);\n    buffer.writeInt16BE(1234, 4);\n    buffer.writeInt16BE(5678, 6);\n    buffer.writeInt32BE(processID, 8);\n    buffer.writeInt32BE(secretKey, 12);\n    return buffer;\n};\n\ntype PortalOpts = {\n    type: 'S' | 'P';\n    name?: string;\n};\n\nconst cstringMessage = (code: code, string: string): Buffer => {\n    const stringLen = Buffer.byteLength(string);\n    const len = 4 + stringLen + 1;\n    // one extra bit for code\n    const buffer = Buffer.allocUnsafe(1 + len);\n    buffer[0] = code;\n    buffer.writeInt32BE(len, 1);\n    buffer.write(string, 5, 'utf-8');\n    buffer[len] = 0; // null terminate cString\n    return buffer;\n};\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe);\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe);\n\nconst describe = (msg: PortalOpts): Buffer => {\n    return msg.name\n        ? cstringMessage(code.describe, `${msg.type}${msg.name || ''}`)\n        : msg.type === 'P'\n        ? emptyDescribePortal\n        : emptyDescribeStatement;\n};\n\nconst close = (msg: PortalOpts): Buffer => {\n    const text = `${msg.type}${msg.name || ''}`;\n    return cstringMessage(code.close, text);\n};\n\nconst copyData = (chunk: Buffer): Buffer => {\n    return writer.add(chunk).flush(code.copyFromChunk);\n};\n\nconst copyFail = (message: string): Buffer => {\n    return cstringMessage(code.copyFail, message);\n};\n\nconst codeOnlyBuffer = (code: code): Buffer => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\n\nconst flushBuffer = codeOnlyBuffer(code.flush);\nconst syncBuffer = codeOnlyBuffer(code.sync);\nconst endBuffer = codeOnlyBuffer(code.end);\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone);\n\nconst serialize = {\n    startup,\n    password,\n    requestSsl,\n    sendSASLInitialResponseMessage,\n    sendSCRAMClientFinalMessage,\n    query,\n    parse,\n    bind,\n    execute,\n    describe,\n    close,\n    flush: () => flushBuffer,\n    sync: () => syncBuffer,\n    end: () => endBuffer,\n    copyData,\n    copyDone: () => copyDoneBuffer,\n    copyFail,\n    cancel\n};\n\nexport { serialize };\n"],"version":3}