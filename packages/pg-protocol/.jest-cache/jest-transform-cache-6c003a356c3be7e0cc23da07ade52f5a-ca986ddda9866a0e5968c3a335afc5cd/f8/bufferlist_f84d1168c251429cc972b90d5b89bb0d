8ec624109819273b354ac293a99123f8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BufferList {
    buffers;
    constructor(buffers = []) {
        this.buffers = buffers;
    }
    add(buffer, front) {
        this.buffers[front ? 'unshift' : 'push'](buffer);
        return this;
    }
    addInt16(val, front) {
        return this.add(Buffer.from([val >>> 8, val >>> 0]), front);
    }
    getByteLength(initial) {
        return this.buffers.reduce(function (previous, current) {
            return previous + current.length;
        }, initial || 0);
    }
    addInt32(val, first) {
        return this.add(Buffer.from([(val >>> 24) & 0xff, (val >>> 16) & 0xff, (val >>> 8) & 0xff, (val >>> 0) & 0xff]), first);
    }
    addCString(val, front) {
        var len = Buffer.byteLength(val);
        var buffer = Buffer.alloc(len + 1);
        buffer.write(val);
        buffer[len] = 0;
        return this.add(buffer, front);
    }
    addString(val, front) {
        var len = Buffer.byteLength(val);
        var buffer = Buffer.alloc(len);
        buffer.write(val);
        return this.add(buffer, front);
    }
    addChar(char, first) {
        return this.add(Buffer.from(char, 'utf8'), first);
    }
    addByte(byte) {
        return this.add(Buffer.from([byte]));
    }
    join(appendLength, char) {
        var length = this.getByteLength();
        if (appendLength) {
            this.addInt32(length + 4, true);
            return this.join(false, char);
        }
        if (char) {
            this.addChar(char, true);
            length++;
        }
        var result = Buffer.alloc(length);
        var index = 0;
        this.buffers.forEach(function (buffer) {
            buffer.copy(result, index, 0);
            index += buffer.length;
        });
        return result;
    }
    static concat() {
        var total = new BufferList();
        for (var i = 0; i < arguments.length; i++) {
            total.add(arguments[i]);
        }
        return total.join();
    }
}
exports.default = BufferList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHJlcG9zXFxub2RlLXBvc3RncmVzXFxwYWNrYWdlc1xccGctcHJvdG9jb2xcXHNyY1xcdGVzdGluZ1xcYnVmZmVyLWxpc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFxQixVQUFVO0lBQ1I7SUFBbkIsWUFBbUIsVUFBb0IsRUFBRTtRQUF0QixZQUFPLEdBQVAsT0FBTyxDQUFlO0lBQUcsQ0FBQztJQUV0QyxHQUFHLENBQUMsTUFBYyxFQUFFLEtBQWU7UUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFXLEVBQUUsS0FBZTtRQUN4QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVNLGFBQWEsQ0FBQyxPQUFnQjtRQUNqQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsUUFBUSxFQUFFLE9BQU87WUFDbEQsT0FBTyxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNyQyxDQUFDLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFTSxRQUFRLENBQUMsR0FBVyxFQUFFLEtBQWU7UUFDeEMsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUNYLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxFQUMvRixLQUFLLENBQ1IsQ0FBQztJQUNOLENBQUM7SUFFTSxVQUFVLENBQUMsR0FBVyxFQUFFLEtBQWU7UUFDMUMsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU0sU0FBUyxDQUFDLEdBQVcsRUFBRSxLQUFlO1FBQ3pDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFZLEVBQUUsS0FBZTtRQUN4QyxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVNLE9BQU8sQ0FBQyxJQUFZO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTSxJQUFJLENBQUMsWUFBc0IsRUFBRSxJQUFhO1FBQzdDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNsQyxJQUFJLFlBQVksRUFBRTtZQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNoQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6QixNQUFNLEVBQUUsQ0FBQztTQUNaO1FBQ0QsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLE1BQU07WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEtBQUssSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxNQUFNO1FBQ2hCLElBQUksS0FBSyxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7UUFDN0IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDdkMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQjtRQUNELE9BQU8sS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hCLENBQUM7Q0FDSjtBQTFFRCw2QkEwRUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXHJlcG9zXFxub2RlLXBvc3RncmVzXFxwYWNrYWdlc1xccGctcHJvdG9jb2xcXHNyY1xcdGVzdGluZ1xcYnVmZmVyLWxpc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVmZmVyTGlzdCB7XG4gICAgY29uc3RydWN0b3IocHVibGljIGJ1ZmZlcnM6IEJ1ZmZlcltdID0gW10pIHt9XG5cbiAgICBwdWJsaWMgYWRkKGJ1ZmZlcjogQnVmZmVyLCBmcm9udD86IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5idWZmZXJzW2Zyb250ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnXShidWZmZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkSW50MTYodmFsOiBudW1iZXIsIGZyb250PzogYm9vbGVhbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoQnVmZmVyLmZyb20oW3ZhbCA+Pj4gOCwgdmFsID4+PiAwXSksIGZyb250KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Qnl0ZUxlbmd0aChpbml0aWFsPzogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzICsgY3VycmVudC5sZW5ndGg7XG4gICAgICAgIH0sIGluaXRpYWwgfHwgMCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEludDMyKHZhbDogbnVtYmVyLCBmaXJzdD86IGJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKFxuICAgICAgICAgICAgQnVmZmVyLmZyb20oWyh2YWwgPj4+IDI0KSAmIDB4ZmYsICh2YWwgPj4+IDE2KSAmIDB4ZmYsICh2YWwgPj4+IDgpICYgMHhmZiwgKHZhbCA+Pj4gMCkgJiAweGZmXSksXG4gICAgICAgICAgICBmaXJzdFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRDU3RyaW5nKHZhbDogc3RyaW5nLCBmcm9udD86IGJvb2xlYW4pIHtcbiAgICAgICAgdmFyIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbCk7XG4gICAgICAgIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MobGVuICsgMSk7XG4gICAgICAgIGJ1ZmZlci53cml0ZSh2YWwpO1xuICAgICAgICBidWZmZXJbbGVuXSA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChidWZmZXIsIGZyb250KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkU3RyaW5nKHZhbDogc3RyaW5nLCBmcm9udD86IGJvb2xlYW4pIHtcbiAgICAgICAgdmFyIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbCk7XG4gICAgICAgIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2MobGVuKTtcbiAgICAgICAgYnVmZmVyLndyaXRlKHZhbCk7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZChidWZmZXIsIGZyb250KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkQ2hhcihjaGFyOiBzdHJpbmcsIGZpcnN0PzogYm9vbGVhbikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoQnVmZmVyLmZyb20oY2hhciwgJ3V0ZjgnKSwgZmlyc3QpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRCeXRlKGJ5dGU6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoQnVmZmVyLmZyb20oW2J5dGVdKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGpvaW4oYXBwZW5kTGVuZ3RoPzogYm9vbGVhbiwgY2hhcj86IHN0cmluZyk6IEJ1ZmZlciB7XG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmdldEJ5dGVMZW5ndGgoKTtcbiAgICAgICAgaWYgKGFwcGVuZExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5hZGRJbnQzMihsZW5ndGggKyA0LCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmpvaW4oZmFsc2UsIGNoYXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyKSB7XG4gICAgICAgICAgICB0aGlzLmFkZENoYXIoY2hhciwgdHJ1ZSk7XG4gICAgICAgICAgICBsZW5ndGgrKztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gQnVmZmVyLmFsbG9jKGxlbmd0aCk7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgIGJ1ZmZlci5jb3B5KHJlc3VsdCwgaW5kZXgsIDApO1xuICAgICAgICAgICAgaW5kZXggKz0gYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjb25jYXQoKTogQnVmZmVyIHtcbiAgICAgICAgdmFyIHRvdGFsID0gbmV3IEJ1ZmZlckxpc3QoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRvdGFsLmFkZChhcmd1bWVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbC5qb2luKCk7XG4gICAgfVxufVxuIl0sInZlcnNpb24iOjN9