{"file":"C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\testing\\buffer-list.ts","mappings":"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","names":[],"sources":["C:\\repos\\node-postgres\\packages\\pg-protocol\\src\\testing\\buffer-list.ts"],"sourcesContent":["export default class BufferList {\n    constructor(public buffers: Buffer[] = []) {}\n\n    public add(buffer: Buffer, front?: boolean) {\n        this.buffers[front ? 'unshift' : 'push'](buffer);\n        return this;\n    }\n\n    public addInt16(val: number, front?: boolean) {\n        return this.add(Buffer.from([val >>> 8, val >>> 0]), front);\n    }\n\n    public getByteLength(initial?: number) {\n        return this.buffers.reduce(function (previous, current) {\n            return previous + current.length;\n        }, initial || 0);\n    }\n\n    public addInt32(val: number, first?: boolean) {\n        return this.add(\n            Buffer.from([(val >>> 24) & 0xff, (val >>> 16) & 0xff, (val >>> 8) & 0xff, (val >>> 0) & 0xff]),\n            first\n        );\n    }\n\n    public addCString(val: string, front?: boolean) {\n        var len = Buffer.byteLength(val);\n        var buffer = Buffer.alloc(len + 1);\n        buffer.write(val);\n        buffer[len] = 0;\n        return this.add(buffer, front);\n    }\n\n    public addString(val: string, front?: boolean) {\n        var len = Buffer.byteLength(val);\n        var buffer = Buffer.alloc(len);\n        buffer.write(val);\n        return this.add(buffer, front);\n    }\n\n    public addChar(char: string, first?: boolean) {\n        return this.add(Buffer.from(char, 'utf8'), first);\n    }\n\n    public addByte(byte: number) {\n        return this.add(Buffer.from([byte]));\n    }\n\n    public join(appendLength?: boolean, char?: string): Buffer {\n        var length = this.getByteLength();\n        if (appendLength) {\n            this.addInt32(length + 4, true);\n            return this.join(false, char);\n        }\n        if (char) {\n            this.addChar(char, true);\n            length++;\n        }\n        var result = Buffer.alloc(length);\n        var index = 0;\n        this.buffers.forEach(function (buffer) {\n            buffer.copy(result, index, 0);\n            index += buffer.length;\n        });\n        return result;\n    }\n\n    public static concat(): Buffer {\n        var total = new BufferList();\n        for (var i = 0; i < arguments.length; i++) {\n            total.add(arguments[i]);\n        }\n        return total.join();\n    }\n}\n"],"version":3}