e5540522ed17bfe413644aeaceecb74a
"use strict";
//binary data writer tuned for encoding binary specific to the postgres binary protocol
Object.defineProperty(exports, "__esModule", { value: true });
exports.Writer = void 0;
class Writer {
    size;
    buffer;
    offset = 5;
    headerPosition = 0;
    constructor(size = 256) {
        this.size = size;
        this.buffer = Buffer.allocUnsafe(size);
    }
    ensure(size) {
        var remaining = this.buffer.length - this.offset;
        if (remaining < size) {
            var oldBuffer = this.buffer;
            // exponential growth factor of around ~ 1.5
            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy
            var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;
            this.buffer = Buffer.allocUnsafe(newSize);
            oldBuffer.copy(this.buffer);
        }
    }
    addInt32(num) {
        this.ensure(4);
        this.buffer[this.offset++] = (num >>> 24) & 0xff;
        this.buffer[this.offset++] = (num >>> 16) & 0xff;
        this.buffer[this.offset++] = (num >>> 8) & 0xff;
        this.buffer[this.offset++] = (num >>> 0) & 0xff;
        return this;
    }
    addInt16(num) {
        this.ensure(2);
        this.buffer[this.offset++] = (num >>> 8) & 0xff;
        this.buffer[this.offset++] = (num >>> 0) & 0xff;
        return this;
    }
    addCString(string) {
        if (!string) {
            this.ensure(1);
        }
        else {
            var len = Buffer.byteLength(string);
            this.ensure(len + 1); // +1 for null terminator
            this.buffer.write(string, this.offset, 'utf-8');
            this.offset += len;
        }
        this.buffer[this.offset++] = 0; // null terminator
        return this;
    }
    addString(string = '') {
        var len = Buffer.byteLength(string);
        this.ensure(len);
        this.buffer.write(string, this.offset);
        this.offset += len;
        return this;
    }
    add(otherBuffer) {
        this.ensure(otherBuffer.length);
        otherBuffer.copy(this.buffer, this.offset);
        this.offset += otherBuffer.length;
        return this;
    }
    join(code) {
        if (code) {
            this.buffer[this.headerPosition] = code;
            //length is everything in this packet minus the code
            const length = this.offset - (this.headerPosition + 1);
            this.buffer.writeInt32BE(length, this.headerPosition + 1);
        }
        return this.buffer.slice(code ? 0 : 5, this.offset);
    }
    flush(code) {
        var result = this.join(code);
        this.offset = 5;
        this.headerPosition = 0;
        this.buffer = Buffer.allocUnsafe(this.size);
        return result;
    }
}
exports.Writer = Writer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHJlcG9zXFxub2RlLXBvc3RncmVzXFxwYWNrYWdlc1xccGctcHJvdG9jb2xcXHNyY1xcYnVmZmVyLXdyaXRlci50cyIsIm1hcHBpbmdzIjoiO0FBQUEsdUZBQXVGOzs7QUFFdkYsTUFBYSxNQUFNO0lBSUc7SUFIWixNQUFNLENBQVE7SUFDZCxNQUFNLEdBQVcsQ0FBQyxDQUFBO0lBQ2xCLGNBQWMsR0FBVyxDQUFDLENBQUE7SUFDbEMsWUFBb0IsT0FBTyxHQUFHO1FBQVYsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDeEMsQ0FBQztJQUVPLE1BQU0sQ0FBQyxJQUFZO1FBQ3pCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFDaEQsSUFBSSxTQUFTLEdBQUcsSUFBSSxFQUFFO1lBQ3BCLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7WUFDM0IsNENBQTRDO1lBQzVDLHFFQUFxRTtZQUNyRSxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUE7WUFDL0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ3pDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO1NBQzVCO0lBQ0gsQ0FBQztJQUVNLFFBQVEsQ0FBQyxHQUFXO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQTtRQUNoRCxJQUFJLENBQUMsTUFBTSxD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QUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ3JELENBQUM7SUFFTSxLQUFLLENBQUMsSUFBYTtRQUN4QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1FBQ2YsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUE7UUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMzQyxPQUFPLE1BQU0sQ0FBQTtJQUNmLENBQUM7Q0FDRjtBQWxGRCx3QkFrRkMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiQzpcXHJlcG9zXFxub2RlLXBvc3RncmVzXFxwYWNrYWdlc1xccGctcHJvdG9jb2xcXHNyY1xcYnVmZmVyLXdyaXRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL2JpbmFyeSBkYXRhIHdyaXRlciB0dW5lZCBmb3IgZW5jb2RpbmcgYmluYXJ5IHNwZWNpZmljIHRvIHRoZSBwb3N0Z3JlcyBiaW5hcnkgcHJvdG9jb2xcclxuXHJcbmV4cG9ydCBjbGFzcyBXcml0ZXIge1xyXG4gIHByaXZhdGUgYnVmZmVyOiBCdWZmZXJcclxuICBwcml2YXRlIG9mZnNldDogbnVtYmVyID0gNVxyXG4gIHByaXZhdGUgaGVhZGVyUG9zaXRpb246IG51bWJlciA9IDBcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNpemUgPSAyNTYpIHtcclxuICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNpemUpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGVuc3VyZShzaXplOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHZhciByZW1haW5pbmcgPSB0aGlzLmJ1ZmZlci5sZW5ndGggLSB0aGlzLm9mZnNldFxyXG4gICAgaWYgKHJlbWFpbmluZyA8IHNpemUpIHtcclxuICAgICAgdmFyIG9sZEJ1ZmZlciA9IHRoaXMuYnVmZmVyXHJcbiAgICAgIC8vIGV4cG9uZW50aWFsIGdyb3d0aCBmYWN0b3Igb2YgYXJvdW5kIH4gMS41XHJcbiAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyNjkwNjMvYnVmZmVyLWdyb3d0aC1zdHJhdGVneVxyXG4gICAgICB2YXIgbmV3U2l6ZSA9IG9sZEJ1ZmZlci5sZW5ndGggKyAob2xkQnVmZmVyLmxlbmd0aCA+PiAxKSArIHNpemVcclxuICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmV3U2l6ZSlcclxuICAgICAgb2xkQnVmZmVyLmNvcHkodGhpcy5idWZmZXIpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkSW50MzIobnVtOiBudW1iZXIpOiBXcml0ZXIge1xyXG4gICAgdGhpcy5lbnN1cmUoNClcclxuICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gMjQpICYgMHhmZlxyXG4gICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiAxNikgJiAweGZmXHJcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDgpICYgMHhmZlxyXG4gICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiAwKSAmIDB4ZmZcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkSW50MTYobnVtOiBudW1iZXIpOiBXcml0ZXIge1xyXG4gICAgdGhpcy5lbnN1cmUoMilcclxuICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gOCkgJiAweGZmXHJcbiAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDApICYgMHhmZlxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhZGRDU3RyaW5nKHN0cmluZzogc3RyaW5nKTogV3JpdGVyIHtcclxuICAgIGlmICghc3RyaW5nKSB7XHJcbiAgICAgIHRoaXMuZW5zdXJlKDEpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgbGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3RyaW5nKVxyXG4gICAgICB0aGlzLmVuc3VyZShsZW4gKyAxKSAvLyArMSBmb3IgbnVsbCB0ZXJtaW5hdG9yXHJcbiAgICAgIHRoaXMuYnVmZmVyLndyaXRlKHN0cmluZywgdGhpcy5vZmZzZXQsICd1dGYtOCcpXHJcbiAgICAgIHRoaXMub2Zmc2V0ICs9IGxlblxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gMCAvLyBudWxsIHRlcm1pbmF0b3JcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkU3RyaW5nKHN0cmluZzogc3RyaW5nID0gJycpOiBXcml0ZXIge1xyXG4gICAgdmFyIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHN0cmluZylcclxuICAgIHRoaXMuZW5zdXJlKGxlbilcclxuICAgIHRoaXMuYnVmZmVyLndyaXRlKHN0cmluZywgdGhpcy5vZmZzZXQpXHJcbiAgICB0aGlzLm9mZnNldCArPSBsZW5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkKG90aGVyQnVmZmVyOiBCdWZmZXIpOiBXcml0ZXIge1xyXG4gICAgdGhpcy5lbnN1cmUob3RoZXJCdWZmZXIubGVuZ3RoKVxyXG4gICAgb3RoZXJCdWZmZXIuY29weSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQpXHJcbiAgICB0aGlzLm9mZnNldCArPSBvdGhlckJ1ZmZlci5sZW5ndGhcclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGpvaW4oY29kZT86IG51bWJlcik6IEJ1ZmZlciB7XHJcbiAgICBpZiAoY29kZSkge1xyXG4gICAgICB0aGlzLmJ1ZmZlclt0aGlzLmhlYWRlclBvc2l0aW9uXSA9IGNvZGVcclxuICAgICAgLy9sZW5ndGggaXMgZXZlcnl0aGluZyBpbiB0aGlzIHBhY2tldCBtaW51cyB0aGUgY29kZVxyXG4gICAgICBjb25zdCBsZW5ndGggPSB0aGlzLm9mZnNldCAtICh0aGlzLmhlYWRlclBvc2l0aW9uICsgMSlcclxuICAgICAgdGhpcy5idWZmZXIud3JpdGVJbnQzMkJFKGxlbmd0aCwgdGhpcy5oZWFkZXJQb3NpdGlvbiArIDEpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5idWZmZXIuc2xpY2UoY29kZSA/IDAgOiA1LCB0aGlzLm9mZnNldClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBmbHVzaChjb2RlPzogbnVtYmVyKTogQnVmZmVyIHtcclxuICAgIHZhciByZXN1bHQgPSB0aGlzLmpvaW4oY29kZSlcclxuICAgIHRoaXMub2Zmc2V0ID0gNVxyXG4gICAgdGhpcy5oZWFkZXJQb3NpdGlvbiA9IDBcclxuICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRoaXMuc2l6ZSlcclxuICAgIHJldHVybiByZXN1bHRcclxuICB9XHJcbn1cclxuIl0sInZlcnNpb24iOjN9