CREATE USER bookbarter WITH
  ENCRYPTED PASSWORD 'bookbarter' -- choose better password))
  LOGIN
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION;

CREATE DATABASE bookbarter -- yes has same name as user
    WITH 
    OWNER = postgres -- pick a user with create db rights
    ENCODING = 'UTF8'
    LC_COLLATE = 'C'
    LC_CTYPE = 'C'
    TABLESPACE = pg_default
    TEMPLATE = template0
    CONNECTION LIMIT = -1;

COMMENT ON DATABASE bookbarter
    IS 'The book barter app';

GRANT ALL ON DATABASE bookbarter TO bookbarter; -- only user boobarter can connect, etc 
-- at this moment log out as superuser (postgres in this case)
-- and connect to the new database with use "bookbarter" 




                       +---------------------+
                       | issued_keys         |
                       +---------------------+
                       | ip_addr             |
                       | session_key         |
+-------------------+  | timestamp_issued    |
| session_props     |  | timestamp_revoked   |
+-------------------+  | timestamp_lifespan  |    +--------------+
|                   |  | purpose             |    |user          |
| fk_session        +--+ id                  |    +--------------+
| name              |  | fk_user             +--+-+id            |
| Value             |  +---------------------+  | |name          |
+-------------------+                           | |email         |
                                                | |              |
                                                | |              |
                           +-----------------+  | |              |
                           |user_props       |  | +--------------+
                           +-----------------+  |
                           |fk_user          +--+
                           |name             |
                           |Value            |
                           |                 |
                           |                 |
                           |                 |
                           +-----------------+

/*
  execute this as user "bookbarter" while logged into the target db
 
  drop schema auth cascade;
 
  view 
select * from 
  pg_class s0 ,
  (select oid  from pg_namespace where nspname = 'auth') s1
where s1.oid = s0.relnamespace
*/

create schema auth 
create table auth.user (
   id bigserial,
   name varchar(30),-- nick no spaces	
   email varchar(120),
   constraint pk_user primary key (id)	
)
CREATE unique INDEX user_name_udx ON auth.user (name)
create unique index user_email_udx on auth.user (email)
create table user_props (
   fk_user bigint,
   name varchar(30),
   value varchar(60),
   constraint user_props_user_fk FOREIGN KEY (fk_user) REFERENCES auth.user(id)
)
create UNIQUE index user_props_user_udx on user_props(fk_user, name)
create index user_props_user_name_idx on user_props(name, fk_user)
create table issued_keys (
   fk_user bigint,
   session_key UUID,
   purpose varchar(5),   
   ip_addr inet,

   timestamp_issued bigint,  
   timestamp_revoked bigint,     
   timestamp_lifespan bigint,
   CONSTRAINT pk_issued_keys PRIMARY KEY (session_key),
   CONSTRAINT fk_issued_keys_user FOREIGN KEY (fk_user) REFERENCES auth.user(id)
)
CREATE UNIQUE index issued_keys_ses_usr_udx on issued_keys (session_key)
CREATE Index issued_keys_ses_usr_idx on issued_keys (fk_user, session_key) 
CREATE Index expired_keys on issued_keys (timestamp_issued)
create table session_props (
  fk_session bigint,
  name varchar(30),
  value varchar(60),
 CONSTRAINT session_props_session
   FOREIGN KEY (fk_session) REFERENCES auth.user(id)
)
CREATE UNIQUE INDEX session_props_name_udx ON session_props (name, fk_session)
CREATE INDEX session_props_fk_session ON session_props( fk_session, name);
/*
possible modules to use 
: 'after'
:
*/